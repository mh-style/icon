(function () {
  'use strict';

  var _WINDOW = {};
  var _DOCUMENT = {};

  try {
    if (typeof window !== 'undefined') _WINDOW = window;
    if (typeof document !== 'undefined') _DOCUMENT = document;
  } catch (e) {}

  var _ref = _WINDOW.navigator || {},
    _ref$userAgent = _ref.userAgent,
    userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;

  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
  var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

  var NAMESPACE_IDENTIFIER = '___MH_STYLE_ICON___';
  var PRODUCTION = function () {
    try {
      return "production" === 'production';
    } catch (e) {
      return false;
    }
  }();

  function bunker(fn) {
    try {
      fn();
    } catch (e) {
      if (!PRODUCTION) {
        throw e;
      }
    }
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  var w = WINDOW || {};
  if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
  if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
  if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w[NAMESPACE_IDENTIFIER];

  function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks,
      skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = Object.keys(icons).reduce(function (acc, iconName) {
      var icon = icons[iconName];
      var expanded = !!icon.icon;

      if (expanded) {
        acc[icon.iconName] = icon.icon;
      } else {
        acc[iconName] = icon;
      }

      return acc;
    }, {});

    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
      namespace.hooks.addPack(prefix, normalized);
    } else {
      namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll easy the upgrade process for our users by automatically defining
     * this as well.
     */


    if (prefix === 'mh') {
      defineIcons('mhi', icons);
    }
  }

  var icons = {
    "10k": [512, 512, [], "e900", "M469.334 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM284 313.334v-114.666q0-12-8-20t-20-8h-70.666q-12 0-20.666 8t-8.666 20v114.666q0 12 8.666 20t20.666 8h70.666q12 0 20-8t8-20zM128 341.334v-170.667h-85.334v42.667h42.666v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM198.667 213.333h42.667v85.333h-42.666v-85.334z"],
    "10mp": [512, 512, [], "e901", "M356 313.334h42.666v42.666h-42.666v-42.666zM384 213.333v-113.334q0-12-8-20.666t-20-8.666h-72q-12 0-20 8.666t-8 20.666v113.334q0 12 8 20t20 8h72q12 0 20-8t8-20zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM298.666 113.334h42.666v85.334h-42.666v-85.334z"],
    "12mp": [512, 512, [], "e902", "M356 313.334h42.666v42.666h-42.666v-42.666zM356 170.667q12 0 20-8t8-20v-42.666q0-12-8-20.666t-20-8.666h-100v42.666h85.334v29.334h-57.334q-12 0-20 8t-8 20v70.666h128v-42.666h-85.334v-28h57.334zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "13mp": [512, 512, [], "e903", "M356 313.334h42.666v42.666h-42.666v-42.666zM384 213.333v-113.334q0-12-8-20.666t-20-8.666h-100v42.666h85.334v29.333h-57.334v28h57.334v28h-85.334v42.666h100q12 0 20-8t8-20zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "14mp": [512, 512, [], "e904", "M356 313.334h42.666v42.666h-42.666v-42.666zM412 198.667v-42.667h-28v-85.334h-42.666v85.334h-42.666v-85.334h-42.666v128h85.334v42.666h42.666v-42.666h28zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "15mp": [512, 512, [], "e905", "M356 313.334h42.666v42.666h-42.666v-42.666zM384 113.334v-42.666h-128v100h85.334v28h-85.334v42.667h100q12 0 20-8t8-20v-42.666q0-12-8-20t-20-8h-57.334v-29.334h85.334zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "16mp": [512, 512, [], "e906", "M356 313.334h42.666v42.666h-42.666v-42.666zM284 241.333h72q12 0 20-8t8-20v-42.667q0-12-8-20t-20-8h-57.334v-29.334h85.334v-42.666h-100q-12 0-20 8.666t-8 20.666v113.333q0 12 8 20t20 8zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM298.666 170.667h42.666v42.667h-42.666v-42.666z"],
    "17mp": [512, 512, [], "e907", "M356 313.334h42.666v42.666h-42.666v-42.666zM341.334 241.333l41.334-133.333q4-14.666-4-26t-22.666-11.334h-100v42.666h74.666l-38.666 128h49.334zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "18mp": [512, 512, [], "e908", "M356 313.334h42.666v42.666h-42.666v-42.666zM298.666 142.667v-42.666h42.666v42.666h-42.666zM298.666 213.333v-42.667h42.666v42.666h-42.666zM384 213.333v-113.334q0-12-8-20.666t-20-8.666h-72q-12 0-20 8.666t-8 20.666v113.334q0 12 8 20t20 8h72q12 0 20-8t8-20zM198.667 70.666h-85.334v42.666h42.666v128h42.666v-170.667zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "19mp": [512, 512, [], "e909", "M356 313.334h42.666v42.666h-42.666v-42.666zM441.334 369.334v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.667h42.666v-42.666h56q12 0 20.666-8.666t8.666-20.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM113.334 70.666v42.666h42.666v128h42.666v-170.667h-85.334zM298.666 142.667v-42.666h42.666v42.666h-42.666zM256 198.667v42.667h100q12 0 20-8t8-20v-113.334q0-12-8-20.666t-20-8.666h-72q-12 0-20 8.666t-8 20.666v42.666q0 12 8 20t20 8h57.334v28h-85.334zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "1k": [512, 512, [], "e910", "M412 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM213.333 341.334v-170.667h-85.334v42.667h42.666v128h42.666zM454.666 0.001q22.666 0 40 17.334t17.334 40v397.333q0 22.666-17.334 40t-40 17.333h-397.333q-22.666 0-40-17.334t-17.334-40v-397.333q0-22.666 17.334-40t40-17.334h397.333z"],
    "1k-plus": [512, 512, [], "e911", "M469.334 270.666v-29.334h-42.666v-42.666h-28v42.666h-42.666v29.334h42.666v42.666h28v-42.666h42.666zM305.334 341.334h50.666l-64-85.334 64-85.334h-50.666l-49.334 64v-64h-42.666v170.666h42.666v-64zM170.667 341.334v-170.667h-85.334v42.667h42.666v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "20mp": [512, 512, [], "e912", "M356 313.334h42.666v42.666h-42.666v-42.666zM198.667 170.667q12 0 20.667-8t8.666-20v-42.666q0-12-8.666-20.666t-20.666-8.666h-98.666v42.666h85.334v29.334h-57.333q-12 0-20 8t-8 20v70.666h128v-42.666h-85.334v-28h56zM412 213.333v-113.334q0-12-8-20.666t-20-8.666h-70.666q-12 0-20.666 8.666t-8.666 20.666v113.334q0 12 8.666 20t20.666 8h70.666q12 0 20-8t8-20zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM326.666 113.334h42.666v85.334h-42.666v-85.334z"],
    "21mp": [512, 512, [], "e913", "M356 313.334h42.666v42.666h-42.666v-42.666zM313.334 70.666v42.666h42.666v128h42.666v-170.667h-85.334zM228 170.667q12 0 20-8t8-20v-42.666q0-12-8-20.666t-20-8.666h-100v42.666h85.334v29.334h-57.334q-12 0-20 8t-8 20v70.666h128v-42.666h-85.334v-28h57.334zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "22mp": [512, 512, [], "e914", "M356 313.334h42.666v42.666h-42.666v-42.666zM384 170.667q12 0 20-8t8-20v-42.666q0-12-8-20.666t-20-8.666h-100v42.666h85.334v29.334h-56q-12 0-20.666 8t-8.666 20v70.666h128v-42.666h-85.334v-28h57.334zM198.667 170.667q12 0 20.667-8t8.666-20v-42.666q0-12-8.666-20.666t-20.666-8.666h-98.666v42.666h85.334v29.334h-57.333q-12 0-20 8t-8 20v70.666h128v-42.666h-85.334v-28h56zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "23mp": [512, 512, [], "e915", "M356 313.334h42.666v42.666h-42.666v-42.666zM412 213.333v-113.334q0-12-8-20.666t-20-8.666h-100v42.666h85.334v29.333h-56v28h56v28h-85.334v42.666h100q12 0 20-8t8-20zM198.667 170.667q12 0 20.667-8t8.666-20v-42.666q0-12-8.666-20.666t-20.666-8.666h-98.666v42.666h85.334v29.334h-57.333q-12 0-20 8t-8 20v70.666h128v-42.666h-85.334v-28h56zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "24mp": [512, 512, [], "e916", "M356 313.334h42.666v42.666h-42.666v-42.666zM441.334 198.667v-42.667h-29.334v-85.334h-42.666v85.334h-42.666v-85.334h-42.666v128h85.334v42.666h42.666v-42.666h29.334zM198.667 170.667q12 0 20.667-8t8.666-20v-42.666q0-12-8.666-20.666t-20.666-8.666h-98.666v42.666h85.334v29.334h-57.333q-12 0-20 8t-8 20v70.666h128v-42.666h-85.334v-28h56zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "2k": [512, 512, [], "e917", "M426.666 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM198.667 270.666q12 0 20.667-8.666t8.666-20.666v-42.666q0-12-8.666-20t-20.666-8h-98.666v42.666h85.334v28h-57.333q-12 0-20 8.666t-8 20.666v70.666h128v-42.666h-85.334v-28h56zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "2k-plus": [512, 512, [], "e918", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM320 341.334h49.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64zM185.333 241.333v-42.667q0-12-8.667-20t-20.666-8h-98.666v42.666h85.334v28h-57.334q-12 0-20 8.666t-8 20.666v70.666h128v-42.666h-85.334v-28h56q12 0 20.666-8.666t8.666-20.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "2mp": [512, 512, [], "e919", "M356 313.334h42.666v42.666h-42.666v-42.666zM298.666 170.667q12 0 20-8t8-20v-42.666q0-12-8-20.666t-20-8.666h-100v42.666h85.334v29.334h-56q-12 0-20.666 8t-8.666 20v70.666h128v-42.666h-85.334v-28h57.334zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "3k": [512, 512, [], "e920", "M426.666 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM228 313.334v-114.666q0-12-8.666-20t-20.666-8h-98.666v42.666h85.334v28h-57.333v29.334h57.334v28h-85.334v42.666h98.666q12 0 20.667-8t8.666-20zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "3k-plus": [512, 512, [], "e921", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM369.334 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM185.333 313.334v-114.666q0-12-8.667-20t-20.666-8h-98.666v42.666h85.334v28h-57.334v29.334h57.334v28h-85.334v42.666h98.666q12 0 20.666-8t8.666-20zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "3mp": [512, 512, [], "e922", "M356 313.334h42.666v42.666h-42.666v-42.666zM326.666 213.333v-113.334q0-12-8-20.666t-20-8.666h-100v42.666h85.334v29.333h-56v28h56v28h-85.334v42.666h100q12 0 20-8t8-20zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "4k": [512, 512, [], "e923", "M426.666 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM256 298.666v-42.666h-28v-85.334h-42.666v85.334h-42.666v-85.334h-42.666v128h85.334v42.666h42.667v-42.666h28zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "4k-plus": [512, 512, [], "e924", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM369.334 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM213.333 298.666v-42.666h-28v-85.334h-42.667v85.334h-42.666v-85.334h-42.666v128h85.333v42.666h42.666v-42.666h28zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "4mp": [512, 512, [], "e925", "M356 313.334h42.666v42.666h-42.666v-42.666zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM341.334 198.667v-42.667h-28v-85.334h-42.666v85.334h-42.666v-85.334h-42.666v128h85.334v42.666h42.666v-42.666h28zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "500px": [512, 512, [], "e926", "M126.5 336.4c0.1 0.3 2.8 7.6 4.3 11.3 8.4 19.9 20.5 37.9 35.9 53.3s33.3 27.5 53.3 35.9c20.7 8.7 42.6 13.2 65.2 13.2s44.6-4.4 65.2-13.2c20-8.4 37.9-20.5 53.3-35.9s27.5-33.3 35.9-53.3c8.7-20.7 13.2-42.6 13.2-65.2s-4.4-44.6-13.2-65.2c-8.4-20-20.5-37.9-35.9-53.3s-33.3-27.5-53.3-35.9c-20.7-8.7-42.6-13.2-65.2-13.2-22.9 0-45.8 4.6-66.1 13.2-16.3 6.9-43.9 24.6-60 41.3l-0.1 0.1v-138h231.7c8.4-0.1 8.4-11.9 8.4-15.7 0-3.9 0-15.6-8.5-15.7h-250.5c-6.8 0-11 5.7-11 10.9v194.1c0 6.3 7.8 10.8 15.1 12.3 14.2 3 17.4-1.5 20.9-6.3l0.5-0.6c5.3-7.9 21.8-24.5 22-24.7 25.8-25.8 60.3-40 97.2-40 36.7 0 71.1 14.2 96.9 40 25.9 25.9 40.2 60.2 40.2 96.6 0 36.5-14.2 70.9-40 96.6-25.4 25.4-61 40-97.5 40-24.7 0-48.6-6.6-69.1-19.1l0.1-118c0-15.7 6.8-32.9 18.3-45.8 13.1-14.8 31.1-22.9 50.8-22.9 19 0 36.8 7.2 50.1 20.3 13.1 13 20.4 30.4 20.4 48.9 0 39.4-31 70.3-70.6 70.3-7.6 0-21.5-3.4-22.1-3.5-8-2.4-11.4 8.7-12.5 12.4-4.3 14.1 2.2 16.9 3.5 17.3 12.7 4 21.1 4.7 32.1 4.7 55.9 0 101.4-45.5 101.4-101.4 0-55.5-45.5-100.6-101.3-100.6-27.4 0-53.1 10.5-72.4 29.4-18.4 18.1-28.9 42.2-28.9 66.2v0.6c-0.1 3-0.1 73.8-0.2 97l-0.1-0.1c-10.5-11.6-20.9-29.4-27.8-47.6-2.7-7.1-8.8-5.9-17.1-3.3-4 1.1-15 4.5-12.5 12.6v0zM245.6 308.7c0 3.4 3.1 6.4 5 8.1l0.6 0.6c3.2 3.1 6.2 4.7 9 4.7 2.3 0 3.7-1.1 4.2-1.6 1.4-1.3 17.2-17.4 18.8-18.9l17.7 17.6c1.6 1.8 3.4 2.8 5.5 2.8 2.8 0 5.9-1.7 9.1-5 7.6-7.8 3.8-12 2-14l-17.9-17.9 18.7-18.8c4.1-4.4 0.5-9.1-3.1-12.7-5.2-5.2-10.3-6.6-13.5-3.6l-18.6 18.6-18.8-18.8c-1-1-2.3-1.5-3.6-1.5-2.5 0-5.5 1.7-8.8 5-5.8 5.8-7 9.8-4 13l18.8 18.7-18.7 18.7c-1.7 1.6-2.5 3.3-2.4 5zM286.5 54.9c-30 0-62 6.1-85.4 16.2-2.5 1-4 3-4.3 5.8-0.3 2.7 0.4 6.2 2.2 10.8 1.5 3.7 5.3 13.6 12.8 10.7 24-9.2 50.6-14.2 74.7-14.2 27.4 0 54 5.4 79 15.9 19.9 8.4 38.6 20.6 59 38.2 1.5 1.3 3.1 1.9 4.7 1.9 4 0 7.8-3.9 11.1-7.6 5.4-6.1 9.2-11.2 3.8-16.3-19.5-18.4-40.8-32.2-67.2-43.4-28.6-11.9-59.1-18-90.4-18zM448.2 425.6v0c-3.6-3.6-6.7-5.7-9.4-6.5s-5.2-0.2-7.1 1.7l-1.8 1.8c-18.6 18.6-40.3 33.2-64.4 43.4-25 10.6-51.5 15.9-78.8 15.9-27.4 0-53.9-5.4-78.8-15.9-24.1-10.2-45.8-24.8-64.4-43.4-19.4-19.4-34-41.1-43.4-64.4-9.2-22.8-12.2-39.9-13.2-45.5-0.1-0.5-0.2-0.9-0.2-1.2-1.3-6.6-7.4-7.1-16.1-5.7-3.6 0.6-14.7 2.3-13.7 10.2v0.2c2.9 18.5 8.1 36.6 15.4 53.8 11.7 27.7 28.5 52.6 49.9 74s46.3 38.1 74 49.9c28.7 12.1 59.2 18.3 90.6 18.3s61.9-6.2 90.6-18.3c27.7-11.7 52.6-28.5 74-49.9 0 0 1.2-1.2 1.9-1.9 2.2-2.7 4.3-7.2-5.1-16.5z"],
    "5k": [512, 512, [], "e927", "M426.666 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM228 213.333v-42.667h-128v100h85.334v28h-85.334v42.666h98.666q12 0 20.667-8t8.666-20v-42.666q0-12-8.666-20.666t-20.666-8.666h-56v-28h85.334zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "5k-plus": [512, 512, [], "e928", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM369.334 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM185.333 213.333v-42.667h-128v100h85.333v28h-85.334v42.666h98.666q12 0 20.667-8t8.666-20v-42.666q0-12-8.666-20.666t-20.666-8.666h-56v-28h85.334zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "5mp": [512, 512, [], "e929", "M356 313.334h42.666v42.666h-42.666v-42.666zM326.666 113.334v-42.666h-128v100h85.334v28h-85.334v42.667h100q12 0 20-8t8-20v-42.666q0-12-8-20t-20-8h-57.334v-29.334h85.334zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "6k-plus": [512, 512, [], "e930", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM369.334 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM185.333 213.333v-42.667h-100q-12 0-20 8t-8 20v114.666q0 12 8 20t20 8h70.667q12 0 20.666-8t8.666-20v-42.666q0-12-8.666-20.666t-20.666-8.666h-56v-28h85.334zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM100 270.666h42.666v42.666h-42.666v-42.666z"],
    "6mp": [512, 512, [], "e931", "M356 313.334h42.666v42.666h-42.666v-42.666zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM228 241.333h70.666q12 0 20-8t8-20v-42.667q0-12-8-20t-20-8h-57.334v-29.334h85.334v-42.666h-98.666q-12 0-20.666 8.666t-8.666 20.666v113.333q0 12 8.666 20t20.666 8zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM241.333 170.667h42.667v42.667h-42.666v-42.666z"],
    "7k": [512, 512, [], "e932", "M426.666 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM185.333 341.334l41.333-133.333q4-13.333-4.667-25.333t-23.333-12h-98.666v42.666h74.666l-40 128h50.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "7k-plus": [512, 512, [], "e933", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM369.334 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM142.667 341.334l41.333-133.333q4-13.333-4.667-25.333t-23.333-12h-98.666v42.666h74.666l-40 128h50.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "7mp": [512, 512, [], "e934", "M356 313.334h42.666v42.666h-42.666v-42.666zM284 241.333l41.334-133.333q4-14.666-4.666-26t-22-11.334h-100v42.666h74.666l-38.666 128h49.334zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334z"],
    "8k": [512, 512, [], "e935", "M426.666 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM228 313.334v-114.666q0-12-8.666-20t-20.666-8h-70.666q-12 0-20 8t-8 20v114.666q0 12 8 20t20 8h70.666q12 0 20.666-8t8.666-20zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM142.667 198.667h42.667v42.667h-42.666v-42.666zM142.667 270.666h42.667v42.666h-42.666v-42.666z"],
    "8k-plus": [512, 512, [], "e936", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM369.334 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM185.333 313.334v-114.666q0-12-8.667-20t-20.666-8h-70.666q-12 0-20 8t-8 20v114.666q0 12 8 20t20 8h70.666q12 0 20.666-8t8.666-20zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM100 198.667h42.666v42.667h-42.666v-42.666zM100 270.666h42.666v42.666h-42.666v-42.666z"],
    "8mp": [512, 512, [], "e937", "M356 313.334h42.666v42.666h-42.666v-42.666zM326.666 213.333v-113.334q0-12-8-20.666t-20-8.666h-70.666q-12 0-20.666 8.666t-8.666 20.666v113.334q0 12 8.666 20t20.666 8h70.666q12 0 20-8t8-20zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM241.333 100h42.667v42.666h-42.666v-42.666zM241.333 170.667h42.667v42.667h-42.666v-42.666z"],
    "9k": [512, 512, [], "e938", "M426.666 341.334l-64-85.334 64-85.334h-49.334l-50.666 64v-64h-42.666v170.666h42.666v-64l50.666 64h49.334zM228 313.334v-114.666q0-12-8.666-20t-20.666-8h-70.666q-12 0-20 8t-8 20v42.666q0 12 8 20.666t20 8.666h57.334v28h-85.334v42.666h98.666q12 0 20.667-8t8.666-20zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM142.667 198.667h42.667v42.667h-42.666v-42.666z"],
    "9k-plus": [512, 512, [], "e939", "M484 270.666v-29.334h-42.666v-42.666h-29.334v42.666h-42.666v29.334h42.666v42.666h29.334v-42.666h42.666zM369.334 341.334l-64-85.334 64-85.334h-49.334l-49.334 64v-64h-42.666v170.666h42.666v-64l49.334 64h49.334zM185.333 313.334v-114.666q0-12-8.667-20t-20.666-8h-70.666q-12 0-20 8t-8 20v42.666q0 12 8 20.666t20 8.666h57.334v28h-85.334v42.666h98.666q12 0 20.666-8t8.666-20zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM100 198.667h42.666v42.667h-42.666v-42.666z"],
    "9mp": [512, 512, [], "e940", "M356 313.334h42.666v42.666h-42.666v-42.666zM326.666 213.333v-113.334q0-12-8-20.666t-20-8.666h-70.666q-12 0-20.666 8.666t-8.666 20.666v42.666q0 12 8.666 20t20.666 8h56v28h-85.334v42.666h100q12 0 20-8t8-20zM356 441.334v-42.666h56q12 0 20.666-8.666t8.666-20.666v-70.666q0-12-8.666-20t-20.666-8h-98.666v170.666h42.666zM256 441.334v-142.666q0-12-8-20t-20-8h-128q-12 0-20.666 8t-8.666 20v142.667h42.666v-128h29.334v85.334h42.667v-85.334h28v128h42.666zM454.666 0q22.666 0 40 17.334t17.334 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-22.666 0-40-17.334t-17.334-40v-397.334q0-22.666 17.334-40t40-17.334h397.334zM241.333 100h42.667v42.666h-42.666v-42.666z"],
    "celsius": [512, 512, [], "e941", "M151.005 77.487c-8.080-7.614-17.469-13.638-28.118-18.075-10.788-4.345-22.28-6.587-34.469-6.587-12.236 0-23.728 2.242-34.469 6.587-10.649 4.437-20.038 10.463-28.116 18.075-8.035 7.66-14.339 16.629-18.965 26.997-4.578 10.324-6.865 21.251-6.865 32.694 0 11.49 2.289 22.419 6.865 32.743 4.623 10.322 10.93 19.337 18.965 26.948 8.080 7.661 17.467 13.732 28.116 18.077 10.741 4.437 22.233 6.631 34.469 6.631 12.192 0 23.679-2.195 34.469-6.631 10.649-4.345 20.038-10.416 28.118-18.077 8.033-7.612 14.339-16.629 18.868-26.948 4.578-10.324 6.959-21.251 6.959-32.743 0-11.442-2.381-22.372-6.959-32.694-4.531-10.371-10.835-19.339-18.868-26.997zM116.579 164.173c-7.707 7.661-17.094 11.49-28.163 11.49s-20.457-3.832-28.163-11.49c-7.614-7.661-11.49-16.629-11.49-26.997 0-10.649 3.877-19.803 11.49-27.228 7.707-7.472 17.094-11.162 28.163-11.162s20.457 3.69 28.163 11.162c7.567 7.425 11.442 16.579 11.442 27.228 0 10.371-3.874 19.339-11.442 26.997zM433.672 381.079c-13.591 3.878-27.089 5.791-40.493 5.791-8.829 0-17.514-1.354-26.11-4.013-8.64-2.711-16.487-6.914-23.538-12.658-7.1-5.746-12.846-13.079-17.189-22.092-4.392-8.967-6.632-19.991-6.632-32.976v-115.365c0-12.985 2.24-24.101 6.632-33.302 4.342-9.154 9.997-16.629 16.906-22.372 6.914-5.744 14.666-9.856 23.54-12.331 8.781-2.477 17.563-3.738 26.389-3.738 13.404 0 27.181 1.962 41.334 6.026 14.153 4.016 27.325 11.208 39.61 21.531l37.879-60.859c-15.366-13.358-33.582-23.118-54.88-29.284-21.207-6.071-43.251-9.154-66.233-9.154-18.729 0-37.178 2.708-55.113 8.035-17.983 5.371-33.956 13.404-47.921 24.1-13.918 10.743-25.269 24.007-33.815 39.886-8.688 15.881-12.983 34.375-12.983 55.394v148.060c0 21.437 4.437 40.075 13.263 55.956 8.782 15.882 20.269 29.098 34.378 39.606 14.196 10.555 30.219 18.449 48.199 23.82 18.029 5.325 36.384 8.035 55.16 8.035 23.307 0 45.446-3.457 66.558-10.322 21.018-6.912 38.812-16.487 53.385-28.678l-37.319-60.859c-13.734 10.739-27.464 17.978-41.009 21.76z"],
    "Fahrenheit": [512, 512, [], "e942", "M150.167 80.472c-8.035-7.572-17.37-13.564-27.96-17.974-10.728-4.321-22.157-6.55-34.279-6.55-12.171 0-23.597 2.23-34.279 6.55-10.59 4.412-19.928 10.405-27.962 17.974-7.989 7.616-14.26 16.534-18.86 26.846-4.553 10.267-6.827 21.134-6.827 32.516 0 11.427 2.274 22.296 6.827 32.56 4.599 10.264 10.871 19.23 18.86 26.801 8.035 7.616 17.373 13.656 27.962 17.975 10.682 4.412 22.108 6.595 34.279 6.595 12.124 0 23.549-2.183 34.279-6.595 10.59-4.321 19.928-10.358 27.96-17.975 7.99-7.572 14.26-16.536 18.763-26.801 4.553-10.264 6.923-21.133 6.923-32.56 0-11.38-2.37-22.249-6.923-32.516-4.504-10.311-10.773-19.23-18.763-26.846zM115.934 166.679c-7.665 7.619-17 11.429-28.008 11.429s-20.344-3.81-28.008-11.428c-7.572-7.616-11.426-16.534-11.426-26.846 0-10.59 3.855-19.694 11.427-27.080 7.665-7.431 17-11.101 28.007-11.101s20.344 3.67 28.007 11.101c7.522 7.384 11.38 16.49 11.38 27.080 0 10.311-3.857 19.23-11.38 26.846zM511.999 133.004v-70.23h-271.070v393.28h78.174v-160.388h164.938v-70.183h-164.938v-92.478h192.897z"],
    "ie": [512, 512, [], "e943", "M386.422 295.575h124.237c0.958-8.616 1.341-17.42 1.341-26.419 0-42.223-11.334-81.826-31.118-115.93 20.463-54.373 19.733-100.52-7.661-128.1-26.050-25.937-95.942-21.727-174.953 13.262-5.844-0.442-11.747-0.669-17.704-0.669-108.447 0-199.435 74.629-224.583 175.185 34.020-43.555 69.809-75.133 117.62-98.13-4.347 4.073-29.713 29.29-33.979 33.56-126.078 126.041-165.837 290.688-123.056 333.476 32.519 32.512 91.451 27.022 159.145-6.13 31.477 16.031 67.106 25.069 104.851 25.069 101.649 0 187.792-65.43 218.995-156.552h-125.193c-17.228 31.78-50.92 53.411-89.589 53.411-38.667 0-72.36-21.63-89.588-53.411-7.658-14.354-12.060-30.818-12.060-48.24v-0.38h203.295zM183.317 234.508c2.871-51.111 45.368-91.886 97.245-91.886s94.375 40.774 97.245 91.887h-194.49zM472.087 50.826c17.645 17.831 17.204 50.639 2.111 91.591-25.861-39.425-63.43-70.493-107.786-88.231 47.424-20.336 86.003-23.029 105.673-3.359zM49.201 473.693c-22.517-22.524-15.729-69.799 13.279-126.754 18.057 50.668 53.24 93.206 98.598 120.608-50.227 22.799-91.335 26.671-111.877 6.147z"],
    "icomoon": [512, 512, [], "e944", "M129.772 255.999c0-32.708 26.515-59.223 59.223-59.223s59.223 26.515 59.223 59.223c0 32.708-26.515 59.223-59.223 59.223s-59.223-26.515-59.223-59.223zM256.002 0c-141.387 0-256.002 114.616-256.002 256s114.613 256 256.002 256c141.382 0 255.998-114.615 255.998-256 0-141.384-114.615-256-255.998-256zM189.698 479.641c-76.978-44.787-128.734-128.162-128.734-223.641s51.756-178.854 128.731-223.641c77.005 44.781 128.795 128.144 128.795 223.641 0 95.494-51.79 178.859-128.792 223.641z"],
    "sajdah": [559, 512, [], "e945", "M362.986 0.12c-4.543 0.174-13.193 0.742-32.327 2.14-16.033 1.179-17.168 1.267-22.935 2.184-2.14 0.349-9.436 0.83-16.164 1.092-6.728 0.218-13.979 0.612-16.164 0.873-10.615 1.267-21.581 4.325-29.4 8.257-8.387 4.194-24.857 14.067-30.143 18.043-2.883 2.141-6.291 7.252-7.514 11.227-0.524 1.572-1.267 3.276-1.704 3.757-0.481 0.48-1.922 3.145-3.276 5.941-1.966 4.15-2.927 5.636-5.243 7.951-2.752 2.796-5.592 4.675-7.121 4.675-1.223 0-4.893 2.316-7.994 5.067-8.519 7.514-16.775 13.368-24.028 16.994-5.155 2.578-7.863 4.63-7.863 5.942 0 1.355 1.005 1.398 4.631 0.174 5.417-1.791 9.655-4.281 15.29-8.825 8.694-7.034 16.994-13.106 26.299-19.266 4.893-3.233 9.174-6.334 9.524-6.858s0.786-2.447 1.005-4.194c0.917-8.038 10.353-19.965 20.314-25.688 1.835-1.049 3.451-1.835 3.538-1.704 0.088 0.087-0.043 0.918-0.306 1.791s-0.393 1.747-0.262 1.878c0.524 0.48 2.839-1.136 6.858-4.806 4.587-4.238 9.829-7.645 16.863-11.009 7.733-3.713 9.436-4.107 20.969-5.024 8.125-0.655 37.046-0.787 37.351-0.175 0.131 0.219-2.010 1.529-4.675 2.839-5.243 2.578-7.863 4.544-6.596 5.024 0.393 0.174 3.146-0.524 6.116-1.486 25.688-8.3 34.25-10.179 52.947-11.445 8.17-0.524 12.669-0.218 21.668 1.617 16.514 3.32 28.702 8.955 43.512 20.096 9.829 7.383 13.149 11.358 16.295 19.703 2.621 6.946 3.495 8.475 5.635 9.873 2.14 1.441 2.315 2.316 0.568 2.709-0.699 0.131-1.442 0.611-1.616 1.005s-0.481 10.266-0.611 21.931c-0.349 23.984-0.393 24.377-4.368 40.409-3.538 14.373-8.519 28.265-12.625 35.167-3.626 6.116-3.626 3.845 0-3.976 6.029-13.018 10.004-27.435 12.45-44.953 1.442-10.048 0.918-32.24-0.656-31.236-0.699 0.393-0.961 3.233-1.354 13.761-0.437 12.626-1.136 17.213-4.805 31.672-2.927 11.621-4.762 16.863-8.3 23.678-4.238 8.082-13.149 21.625-13.849 20.97-0.306-0.306 0.83-2.359 4.587-8.344 8.868-14.198 14.635-29.75 17.518-47.443 1.572-9.611 2.228-18.873 1.398-19.397-0.611-0.393-1.223 1.136-2.097 5.417-0.349 1.791-0.83 3.451-1.048 3.669-0.481 0.524-0.481 0.743-0.568-15.901-0.043-13.019-0.481-17.43-1.616-18.174-0.699-0.437-1.529 0.568-2.097 2.534-0.306 1.049-1.048 2.927-1.616 4.194l-1.092 2.316 0.656 4.281c0.393 2.359 0.699 5.548 0.699 7.077 0 5.592-1.354 13.63-2.097 12.844-0.175-0.174-0.219-2.709-0.175-5.635 0.175-5.548-0.131-9.742-0.83-10.79-0.918-1.398-1.442 1.18-2.796 13.15-0.699 6.466-1.136 8.388-1.835 8.606-0.699 0.262-1.048-0.961-1.66-5.897-0.306-2.49-0.699-4.63-0.83-4.805-0.873-0.83-1.267 1.442-1.616 9.174-0.524 12.626-2.228 25.95-4.587 35.735-1.136 4.805-1.66 6.116-2.185 5.548-0.437-0.437-0.481-23.328-0.087-24.814 0.219-0.787 0.786-1.267 1.748-1.573l1.442-0.393-0.087-5.024c-0.131-10.091-2.534-22.28-6.466-33.157-1.223-3.495-2.402-6.946-2.577-7.645l-0.306-1.311 0.873 0.874c0.481 0.481 2.709 3.407 4.937 6.509 3.888 5.417 5.155 6.772 5.155 5.374s-10.091-16.688-13.761-20.751c-1.005-1.136-2.49-3.014-3.32-4.194-1.835-2.665-4.849-4.368-11.402-6.553-10.179-3.364-23.634-5.111-25.512-3.276-0.437 0.48-0.611 1.048-0.437 1.617 0.262 0.786 0.786 0.917 4.543 1.136 10.004 0.611 18.435 2.359 22.542 4.718 1.398 0.83 2.228 1.922 4.368 5.854 1.486 2.709 3.538 5.854 4.63 6.99 3.538 3.8 9.043 12.844 9.786 16.12 0.262 1.18 0.087 1.049-2.010-1.311-3.67-4.194-8.344-8.956-8.563-8.737-0.087 0.088 0.918 2.053 2.272 4.325 2.971 4.936 8.082 15.465 11.228 22.979 2.577 6.247 2.971 8.999 1.486 11.009-0.481 0.656-1.136 1.18-1.486 1.092-0.349-0.043-1.223-1.835-2.010-4.237-1.486-4.456-2.272-6.159-3.757-7.864l-0.918-1.092 0.262 1.092c1.267 5.112 1.66 7.121 2.402 12.451 0.481 3.364 1.092 8.999 1.398 12.538 0.743 9.087 0.087 10.179-2.010 3.276-1.18-3.888-1.748-4.587-2.228-2.752-0.349 1.441-1.572 2.49-3.32 2.839-1.966 0.393-2.097 1.486-1.572 12.32 0.262 4.98 0.306 9.611 0.175 10.266-0.306 1.092-0.349 1.136-1.005 0.481-0.524-0.524-0.786-2.053-1.048-5.592-0.349-4.587-0.786-6.291-1.442-5.286-0.349 0.568-1.005 5.329-1.791 13.193-0.393 3.714-1.267 9.917-1.966 13.761-1.66 9.48-1.835 10.615-1.31 10.922 0.656 0.393 1.529-1.398 3.932-8.3 2.534-7.252 4.281-11.402 4.63-11.053 0.349 0.393-3.582 16.906-5.067 21.101-1.966 5.548-3.888 9.262-4.413 8.475-0.219-0.35-0.393-1.136-0.393-1.748 0-1.66-0.83-2.228-2.185-1.486-1.966 1.136-2.927 0.786-4.805-1.572-0.961-1.179-1.922-3.014-2.185-4.019s-0.743-2.534-1.092-3.364c-1.048-2.446-2.272-8.344-3.058-14.329-0.393-3.058-0.918-5.985-1.136-6.553-0.524-1.355-1.878-1.223-3.364 0.393l-1.31 1.398-0.262-1.31c-0.349-1.486-0.043-3.145 0.918-5.329 0.873-1.922 1.354-12.582 0.656-13.849-0.393-0.743-0.611-0.568-1.572 1.572-1.572 3.538-3.32 11.927-3.32 16.077 0 7.121 3.888 17.999 13.979 39.186 4.587 9.611 9.349 20.62 12.232 28.178 1.529 3.976 3.626 9.305 4.63 11.882 1.048 2.577 1.922 5.243 1.922 5.941 0 1.704 0.611 2.097 3.626 2.403 1.398 0.131 3.014 0.524 3.538 0.917 1.18 0.743 8.519 14.941 11.096 21.45 0.961 2.402 2.447 6.029 3.32 8.082 0.961 2.315 1.572 4.413 1.572 5.592 0 1.442 0.349 2.402 1.398 3.844 1.267 1.791 1.354 2.053 0.873 3.408-0.918 2.49-0.611 5.897 1.878 20.533 2.927 17.3 5.024 40.147 5.024 54.52 0 4.762 0.481 7.339 1.354 7.339 1.748 0 4.019-13.761 4.587-27.522 0.306-7.426-0.175-9.786-2.010-9.916-0.611 0-1.354-0.043-1.66-0.087-0.349-0.043-0.524-0.437-0.437-1.005 0.087-0.699 0.481-1.048 1.223-1.136 1.31-0.175 2.185-1.18 2.185-2.577 0-0.568 0.219-1.005 0.437-1.005 0.262 0 0.437 0.087 0.437 0.219 0 1.704 2.49 16.033 3.32 19.091 2.359 8.868 2.839 11.009 4.5 20.925 0.961 5.679 2.185 11.358 2.665 12.625 0.83 2.14 0.83 2.359 0.219 3.364-0.743 1.136-5.897 5.067-6.204 4.762-0.131-0.087 0.262-0.786 0.786-1.572 0.83-1.048 0.918-1.486 0.524-2.097-0.83-1.267-2.884-0.786-5.942 1.398-1.529 1.092-3.058 2.010-3.32 2.010s-0.611 0.611-0.786 1.31c-0.262 1.398-1.223 2.185-2.709 2.185-0.481 0-2.927 0.656-5.373 1.486-2.49 0.83-6.159 1.748-8.169 2.053-5.243 0.743-14.985 0.262-22.105-1.136-3.101-0.611-7.951-1.398-10.703-1.791-11.795-1.616-22.716-5.243-22.716-7.601 0-0.743 2.272-0.481 6.159 0.656 4.849 1.398 7.995 2.097 18.217 4.194 8.606 1.748 11.882 2.053 11.882 1.223 0-0.786-3.495-2.010-10.353-3.714-10.529-2.534-10.266-2.752 3.626-2.796 11.053 0 14.591-0.306 14.591-1.267 0-0.175-3.582-0.656-7.951-1.092-10.31-0.961-26.474-2.796-29.925-3.32-3.101-0.524-4.063-0.83-4.063-1.31 0-0.699 1.048-1.048 5.373-1.572 3.538-0.481 4.805-0.873 7.208-2.185 7.121-3.976 8.257-4.543 9.48-4.543 0.743 0 2.884-0.786 4.805-1.748 4.893-2.447 9.829-3.582 15.901-3.714 4.238-0.131 5.111-0.262 5.592-0.918 1.616-2.228-0.175-4.63-4.019-5.417-5.592-1.136-12.712 1.136-16.251 5.243-1.704 1.966-3.451 2.839-7.383 3.67-3.8 0.83-5.548 1.442-10.441 3.8-4.805 2.272-7.863 2.709-9.611 1.354-1.048-0.83-1.572-0.918-4.543-0.656-5.243 0.393-13.368-1.616-21.887-5.461l-2.839-1.267 3.276-0.568c16.95-2.927 20.969-3.932 20.969-5.199 0-0.743-2.839-1.398-8.955-2.053-10.878-1.18-15.989-2.839-22.63-7.296-3.888-2.577-6.553-3.626-17.344-6.858-4.937-1.486-11.882-3.582-15.509-4.675-15.552-4.675-22.935-8.3-26.212-12.844-1.66-2.315-6.99-6.029-12.101-8.475-4.063-1.922-4.893-1.878-5.067 0.262-0.306 3.538 4.587 12.144 9.436 16.601 2.315 2.14 7.296 5.767 8.519 6.204 0.873 0.306 0.087 0.743-2.315 1.398-3.364 0.873-18.654 2.534-21.013 2.272-1.966-0.262-13.28-3.146-17.824-4.543-1.31-0.437-4.325-1.922-6.727-3.32-5.112-3.058-7.47-3.932-9.349-3.582-1.31 0.219-1.355 0.175-1.31-1.267 0.043-1.092-0.437-2.097-1.704-3.844-0.961-1.267-2.97-4.368-4.456-6.902-1.529-2.534-5.112-7.558-8.038-11.14-5.898-7.296-7.776-10.048-7.776-11.271 0-0.611 0.219-0.743 1.005-0.481 2.708 0.83 10.353 5.505 14.067 8.694 4.631 3.888 7.208 5.373 7.208 4.15 0-0.656-8.038-8.912-15.639-16.033-11.402-10.703-15.072-12.931-25.207-15.202-7.645-1.748-9.873-1.835-14.722-0.656-11.489 2.796-24.464 8.868-29.226 13.717-1.049 1.048-2.097 2.884-3.014 5.286-0.787 2.053-1.617 3.714-1.791 3.714-0.219 0-0.481-0.524-0.656-1.223-0.612-2.752-1.573-5.854-2.403-7.82-0.481-1.136-1.092-3.757-1.267-5.723-0.262-2.402-0.743-4.281-1.398-5.461-0.918-1.748-1.005-2.447-1.223-13.411-0.174-7.863-0.437-12.013-0.83-12.887-0.961-2.272-3.189-5.461-3.8-5.461-0.918 0-0.743 1.66 0.306 3.364 0.699 1.136 0.961 2.272 1.005 4.499 0.088 5.417-1.486 4.98-2.665-0.743-0.918-4.587-1.442-5.417-4.456-7.558-1.442-1.048-3.451-3.014-4.63-4.631-2.228-3.014-3.888-4.587-6.073-5.723-2.752-1.441-6.815-1.66-6.815-0.306 0 0.699 2.053 2.228 5.155 3.931 1.267 0.655 2.927 1.922 3.669 2.752l1.311 1.486-1.136 0.874c-0.699 0.481-1.136 1.223-1.136 1.879 0 1.441-1.005 1.748-3.233 0.874-3.014-1.136-5.854-3.145-6.641-4.718-0.961-1.835-6.378-17.518-8.082-23.503-2.097-7.252-3.014-7.034-3.014 0.655 0 6.858 0.787 9.873 4.325 17.037 3.407 6.815 6.159 10.529 10.179 13.542 2.534 1.922 2.709 1.966 5.81 1.966 5.942 0 9.611 3.015 11.621 9.611 0.524 1.748 0.83 3.8 0.743 5.067l-0.131 2.14-2.927-0.087c-3.276-0.043-12.32-2.185-16.295-3.8-1.442-0.611-4.281-1.791-6.335-2.621-5.81-2.447-6.291-2.053-1.355 1.223 1.617 1.092 4.237 2.447 5.766 2.971l2.796 1.005 0.131 1.835c0.174 2.272-0.174 2.185 9.13 2.49 7.471 0.219 9.523 0.699 8.344 1.878-2.184 2.14-14.504 1.223-23.94-1.835-4.849-1.529-6.116-1.748-6.116-0.961 0 1.66 7.296 4.413 17.343 6.466 6.378 1.31 7.995 1.835 7.995 2.534 0 0.743-2.534 1.048-11.445 1.31-4.98 0.131-9.174 0.437-9.349 0.568-0.918 0.961 7.296 2.534 13.193 2.534 2.84 0 3.32 0.175 2.927 1.136-0.787 2.14-8.694 3.976-18.785 4.413-3.407 0.131-6.466 0.437-6.772 0.656-1.005 0.656 0.83 1.572 3.888 1.922 6.466 0.656 16.688-0.786 23.503-3.364 2.053-0.743 3.844-1.31 3.931-1.18 1.442 1.398-8.956 6.815-14.941 7.776-2.709 0.437-3.189 0.699-3.189 1.572 0 0.786 1.617 0.786 5.942-0.043s6.728-1.616 12.232-3.976c4.499-1.922 6.509-2.402 6.204-1.398-0.83 2.447-14.635 7.907-22.892 9.043-7.82 1.092-8.563 2.665-1.267 2.665 7.951 0 24.377-4.675 26.867-7.645 0.306-0.393 0.961-0.918 1.398-1.136 1.617-0.873 0.787 1.048-1.398 3.146-4.805 4.675-13.368 7.601-26.124 8.912-3.669 0.393-7.077 0.873-7.645 1.048-0.918 0.393-0.918 0.393-0.088 0.743 1.442 0.656 17.606 0.481 20.314-0.175 1.311-0.349 5.155-1.486 8.519-2.577 3.364-1.048 6.335-2.010 6.641-2.097 0.961-0.306 1.005 0.524 0.088 1.704-0.481 0.611-1.704 1.31-2.709 1.616-2.578 0.699-9.48 3.582-9.48 4.019s8.3-0.262 14.111-1.267c1.529-0.262 1.617-0.219 1.617 0.786 0 0.611-0.262 1.31-0.568 1.616-0.306 0.262-4.718 0.743-9.742 1.136s-10.615 0.961-12.407 1.31c-3.975 0.786-8.213 2.796-14.154 6.772-9.698 6.509-15.684 12.494-22.105 22.062-6.641 9.916-9.698 16.557-10.484 22.63-0.262 2.053-0.961 5.505-1.572 7.601-5.941 20.488-6.029 35.998-0.218 47.137 0.742 1.442 1.66 3.8 2.053 5.243 0.873 3.408 3.975 8.825 7.645 13.499 2.709 3.408 3.888 5.723 3.888 7.688 0 0.393 0.306 1.442 0.655 2.315 1.136 2.709 0.175 3.626-10.834 10.921-9.785 6.422-11.883 8.737-11.577 12.669 0.131 1.486-0.044 1.835-0.961 2.315-1.223 0.611-5.067 0.786-5.417 0.219-0.131-0.219-0.437-1.616-0.655-3.189-0.393-2.315-0.699-3.014-1.791-3.932-1.136-0.961-1.223-1.18-0.655-1.442 0.393-0.131 1.092-0.262 1.485-0.262 0.437 0 1.311-0.393 1.878-0.873 1.398-1.092 5.417-6.902 5.024-7.252-0.349-0.349-7.689 3.714-13.193 7.296-4.806 3.101-7.732 4.413-9.305 4.238-1.005-0.131-1.18-0.349-1.31-1.748-0.393-4.5 5.461-10.353 16.469-16.557 2.752-1.529 5.767-3.538 6.771-4.413 1.704-1.529 1.748-1.616 0.699-1.616-1.311-0.043-4.019 1.136-7.383 3.189-1.355 0.83-3.757 2.010-5.373 2.665-1.878 0.743-3.888 2.010-5.592 3.538-2.752 2.447-4.107 2.971-7.426 2.709-1.922-0.131-1.966-0.175-1.878-1.572 0.088-2.447 1.136-3.146 4.587-3.146 2.752 0 3.014-0.087 3.495-1.092 0.655-1.442 3.845-3.888 13.106-10.004 7.426-4.937 12.057-8.519 11.009-8.563-0.611 0-5.111 1.878-11.752 4.98-5.767 2.665-7.864 3.058-9.174 1.572-0.918-1.005-1.049-3.146-0.262-4.106 0.306-0.349 1.878-1.092 3.451-1.616 2.49-0.786 11.184-4.5 17.43-7.426 2.883-1.398 3.014-3.014 0.218-3.014-6.029 0-20.62 5.81-24.858 9.873-3.233 3.058-2.14 5.767 3.495 8.737l3.407 1.791-3.538 1.398c-1.922 0.743-4.543 1.572-5.767 1.791-2.708 0.524-3.8 1.223-6.596 4.063-2.621 2.709-3.932 5.199-3.583 6.815 0.131 0.656 1.66 3.757 3.32 6.858 1.704 3.101 3.67 6.772 4.369 8.17l1.311 2.534 1.441-0.873c1.966-1.223 6.159-2.228 9.655-2.359 2.49-0.087 3.014 0.043 3.495 0.786 0.611 0.873 0.787 1.048 2.402 2.49 0.655 0.568 0.787 1.092 0.611 2.097-0.393 1.878 0.48 2.752 2.402 2.402 3.539-0.656 7.863-3.67 11.14-7.733 3.975-4.893 6.858-5.548 12.407-2.839 3.757 1.835 7.252 2.359 10.791 1.616 2.97-0.611 4.15-1.616 3.845-3.233-0.131-0.611-0.088-1.136 0.131-1.136 0.174 0 2.141 0.873 4.325 1.922 2.228 1.092 7.296 3.058 11.358 4.413s7.689 2.621 8.038 2.884c0.481 0.306-2.534 0.349-9.218 0.175-5.417-0.175-10.31-0.175-10.79 0-1.223 0.393-0.656 1.442 1.311 2.359 0.874 0.437 1.791 1.31 2.228 2.228 0.393 0.83 0.918 1.748 1.136 2.010 0.699 0.786 39.448 6.596 50.763 7.601 7.601 0.699 34.993 1.048 35.822 0.481 1.267-0.873-0.306-1.572-3.538-1.572-1.66 0-3.014-0.131-3.014-0.306 0-0.131 0.743-0.524 1.66-0.83 2.228-0.786 20.751-0.873 21.537-0.087 0.699 0.699-0.786 1.267-5.243 2.14-1.791 0.349-3.32 0.699-3.407 0.743-0.043 0.087 1.223 0.568 2.883 1.092 4.194 1.354 4.412 1.748 2.228 4.238-0.961 1.092-1.748 2.315-1.748 2.665 0 1.136 1.223 3.058 2.839 4.456 4.5 3.976 8.694 3.714 11.708-0.699 0.786-1.136 2.141-2.796 3.058-3.67 2.927-2.752 11.227-6.247 11.227-4.718 0 0.306-1.267 1.878-2.839 3.538-3.276 3.495-4.238 5.199-4.325 7.514-0.088 4.368 5.243 3.888 15.465-1.398 2.752-1.398 5.898-2.796 6.99-3.101s3.276-1.442 4.936-2.534c1.617-1.048 3.058-1.835 3.233-1.66 0.174 0.131-0.874 2.010-2.359 4.106-1.441 2.097-2.927 4.413-3.32 5.155-1.136 2.228-0.393 2.49 7.165 2.709l6.509 0.175 6.465-6.247c7.121-6.946 11.664-10.31 15.858-11.882 1.529-0.524 5.243-2.577 8.257-4.543 3.014-1.922 6.64-4.106 8.125-4.849 2.796-1.398 3.932-2.665 6.291-6.858 3.189-5.723 5.417-7.601 10.266-8.475 5.897-1.092 13.411-0.393 21.188 1.966 6.072 1.835 11.271 2.665 19.659 3.014 23.853 1.005 39.755 2.577 45.433 4.368 3.189 1.048 9.611 1.529 20.314 1.529 11.708 0 17.038-0.393 30.144-2.228 11.096-1.529 15.115-2.534 23.591-6.029 7.339-3.058 10.441-4.15 14.46-5.067 6.684-1.529 31.585-10.004 36.172-12.32 3.757-1.878 4.937-3.364 3.538-4.5-1.005-0.83-4.281 0.131-12.014 3.495-7.252 3.189-14.504 5.635-30.144 10.266-5.373 1.572-11.577 3.582-13.761 4.413-2.14 0.873-5.155 2.010-6.64 2.577-8.955 3.451-33.288 5.635-51.331 4.63-5.373-0.262-14.853-0.699-21.101-0.918-11.708-0.437-13.499-0.611-22.062-2.359-2.752-0.568-5.897-1.18-6.99-1.31-2.359-0.349-3.8-1.223-8.868-5.286l-3.757-3.058 2.185-0.131c2.796-0.175 6.116 0.786 10.834 3.146 7.951 3.976 13.149 5.199 22.105 5.199 9.305 0 16.819-1.354 37.788-6.902 2.752-0.699 5.329-1.092 7.645-1.092 5.854 0 18.567 2.402 25.425 4.805 1.398 0.481 2.971 0.873 3.582 0.873 1.048 0 1.048 0 0.219-0.961-1.748-1.966-12.844-6.378-18.305-7.296-3.101-0.481-5.024-1.18-5.024-1.791 0-0.219 0.743-0.743 1.616-1.092 0.873-0.393 2.796-1.398 4.238-2.315 5.199-3.233 10.659-5.111 18.741-6.422 9.48-1.529 17.736-1.267 26.605 0.873 5.155 1.267 7.339 1.398 7.339 0.481 0-2.228-12.014-5.505-20.096-5.505-1.791 0-4.849 0.393-6.772 0.83-1.922 0.481-3.626 0.743-3.844 0.611-0.524-0.306 2.14-2.971 4.543-4.543 2.272-1.442 2.665-1.529 2.315-0.611-0.437 1.048 1.223 1.005 11.183-0.481 13.673-2.010 21.493-1.354 30.056 2.447 3.8 1.704 5.329 1.966 5.329 0.918 0-0.743-2.752-2.534-5.854-3.757-10.659-4.194-21.101-4.718-33.026-1.704-2.272 0.568-4.325 1.048-4.543 1.048-0.262 0 0.349-0.786 1.267-1.791 6.029-6.204 21.887-8.606 34.206-5.199 2.884 0.786 9.742 3.364 15.596 5.854 2.752 1.18 4.587 1.442 4.587 0.699 0-0.83-3.714-3.189-8.956-5.679-7.776-3.714-15.29-6.116-19.309-6.116-2.185 0-3.189-0.349-3.189-1.092 0-0.873 1.835-1.136 6.247-0.873 3.888 0.262 5.505-0.087 4.98-0.961-0.961-1.572-9.567-0.786-13.673 1.223-2.14 1.005-3.714 1.442-6.772 1.704-3.408 0.306-4.325 0.611-6.247 1.791-2.097 1.354-2.49 1.442-7.164 1.616-2.709 0.087-6.247 0.043-7.863-0.175l-2.927-0.306 5.897-0.568c7.426-0.699 9.174-1.136 11.49-2.927 1.048-0.786 2.839-1.791 4.019-2.272l2.185-0.83-1.748-0.306c-0.961-0.175-8.781-0.087-17.387 0.131-15.028 0.437-21.275 0.262-21.275-0.524s4.98-1.267 15.945-1.529c15.465-0.393 30.493-1.529 31.017-2.402 0.437-0.699-6.815-0.83-20.707-0.393-13.979 0.437-18.086 0.349-17.256-0.481 1.005-0.961 13.062-1.791 38.4-2.621 20.096-0.699 31.847-1.529 31.41-2.272-0.175-0.262-9.087-0.306-25.032-0.131-23.896 0.306-34.817 0-36.609-1.048-1.486-0.786 0.786-1.048 12.931-1.398 15.202-0.481 22.324-1.005 23.896-1.835l1.18-0.611-2.010-0.481c-1.267-0.349-6.422-0.524-14.154-0.524-10.791 0-16.033-0.393-15.29-1.136 0.262-0.262 19.527-2.097 31.76-3.014 4.937-0.349 13.805-0.786 19.79-0.961 5.942-0.131 10.791-0.393 10.791-0.568s-0.524-0.568-1.18-0.918c-1.005-0.524-5.854-0.611-28.308-0.611-30.362-0.043-30.274-0.043-29.619-0.699 0.699-0.699 5.024-1.18 16.95-1.922 17.824-1.092 23.765-1.835 23.11-2.927-0.219-0.349-4.194-0.393-13.892-0.175-13.543 0.306-22.892-0.087-25.425-1.092-3.276-1.223 2.447-1.835 27.129-2.839 11.664-0.437 20.969-0.611 26.649-0.393 14.591 0.481 14.329 0.481 14.504-0.087 0.35-1.005-1.966-1.922-6.072-2.359-2.665-0.262-9.087-0.262-18.697 0.043-23.721 0.699-43.817 0.437-44.865-0.611-0.743-0.699 1.048-1.354 4.15-1.486 1.835-0.087 8.475-0.524 14.722-0.961 6.247-0.481 14.678-1.048 18.785-1.31 4.063-0.262 7.471-0.568 7.558-0.656s0.043-0.349-0.131-0.611c-0.699-1.18-31.498-0.087-43.118 1.529-1.748 0.262-2.14 0.175-2.359-0.481-0.437-1.136 1.136-2.272 3.888-2.796 3.189-0.656 9.786-1.223 22.149-1.966 20.27-1.223 29.095-1.66 40.191-1.966 9.436-0.219 11.14-0.349 11.14-0.918 0-0.961-1.835-1.223-9.174-1.267-9.916-0.043-53.734 1.704-64.611 2.577-5.417 0.481-6.159 0.306-5.854-1.136 0.306-1.791 5.155-2.447 24.813-3.451 12.45-0.656 18.829-1.223 19.746-1.791 1.005-0.611-1.092-1.048-6.684-1.31-4.543-0.219-7.645-0.087-13.717 0.611-9.699 1.136-20.838 1.966-23.154 1.748-2.447-0.175-2.577-1.31-0.262-2.272 3.844-1.486 10.965-2.665 19.484-3.101 5.286-0.306 7.034-0.743 6.509-1.616-0.393-0.611-17.168-0.131-23.765 0.699-4.063 0.524-4.63 0.481-5.111-0.087-0.743-0.918-0.699-1.267 0.262-2.228s2.49-1.136 17.518-2.010c17.518-1.005 25.338-1.748 25.338-2.402 0-0.175-0.437-0.437-0.961-0.611-1.704-0.437-21.8-0.306-28.833 0.219-3.67 0.306-8.432 0.524-10.615 0.568-3.67 0.043-3.932 0-4.063-0.873-0.087-0.481 0.131-1.092 0.437-1.354 0.873-0.699 32.065-3.32 48.185-4.063 10.703-0.481 13.193-0.743 13.63-1.442 0.481-0.786-46.351 0.481-55.787 1.529-7.951 0.83-8.781 0.699-7.121-1.354 1.223-1.486 5.111-1.922 27.872-3.276 19.178-1.18 19.003-1.136 19.003-2.228 0-0.873-3.32-1.092-10.747-0.656-12.188 0.743-33.988 1.048-34.905 0.568-1.005-0.611 0.043-0.743 9.611-1.398 3.626-0.262 7.339-0.743 8.3-1.005l1.748-0.568-3.146-0.131c-1.748-0.087-3.189-0.306-3.189-0.524 0-0.786 3.8-2.621 5.461-2.621 1.354 0 1.966-0.306 3.538-1.922 1.398-1.354 1.922-2.228 1.922-3.146v-1.267l-8.257 0.175c-8.17 0.131-16.906-0.481-17.693-1.267-0.611-0.611 0.961-0.786 10.615-1.267 8.213-0.393 11.053-0.873 8.955-1.529-1.486-0.437-6.466-1.092-10.529-1.398-2.228-0.175-4.063-0.437-4.063-0.611s2.402-0.437 5.373-0.611c9.654-0.524 15.945-1.486 17.256-2.577 1.092-0.873-0.481-1.18-6.902-1.18-7.208-0.043-14.329-0.611-14.94-1.223-1.18-1.18 4.194-1.922 18.567-2.534 8.257-0.349 7.645-0.656 6.64 3.538-0.349 1.398-0.568 2.665-0.481 2.752s1.092-1.136 2.185-2.709c2.010-2.752 3.67-6.596 3.146-7.121-0.131-0.175-3.189 0.043-6.728 0.437-10.703 1.223-17.474 1.442-19.484 0.568-1.616-0.656-1.704-0.786-1.005-1.442 0.437-0.437 1.66-0.786 3.233-0.873 6.466-0.393 13.106-1.092 18.959-1.922l6.378-0.961 0.262-11.402c0.175-6.247 0.306-13.411 0.306-15.858v-4.413l4.805-9.742c2.665-5.373 4.805-9.916 4.805-10.135 0-0.873-1.442-0.786-2.49 0.175-2.927 2.752-10.485 21.188-10.921 26.779-0.131 1.486-0.481 3.101-0.83 3.626-0.918 1.442-4.893 2.665-10.441 3.233-5.767 0.611-7.208 0.306-7.208-1.529 0-1.136-1.442-2.447-2.665-2.447-0.393 0-1.18-0.393-1.748-0.873l-1.048-0.873 1.005-0.83c1.486-1.31 5.243-2.577 12.974-4.5 7.034-1.704 9.436-2.665 8.65-3.451-0.262-0.262-3.32 0.131-8.3 1.136-8.519 1.66-11.533 1.878-12.363 0.873-0.743-0.873-0.175-1.529 1.31-1.529 4.98 0 19.921-5.111 18.654-6.378-0.175-0.175-3.101 0.393-6.509 1.267-7.339 1.835-9.829 2.228-11.664 1.835-2.053-0.437-1.616-1.267 1.223-2.49 2.447-1.048 2.621-1.223 2.752-2.752 0.175-2.315 1.267-2.971 7.995-4.849 6.291-1.791 9.742-3.146 10.659-4.238 0.524-0.656 0.481-0.743-0.349-0.743-0.524 0-3.538 0.699-6.684 1.529-8.475 2.228-20.882 3.146-20.882 1.529 0-0.611 0.524-0.786 4.63-1.529 7.863-1.486 17.212-4.63 17.212-5.854 0-0.612 0.481-0.699-6.204 0.787-7.164 1.616-11.096 2.010-12.712 1.398s-1.31-1.529 0.611-1.704c5.417-0.437 12.625-2.665 12.625-3.931 0-0.568-0.699-0.612-5.155-0.35-5.286 0.306-7.514-0.043-7.514-1.179 0-0.874 2.665-1.966 6.116-2.534 5.373-0.917 4.718-2.534-1.005-2.621-3.32-0.043-6.159-0.83-6.334-1.791s0.524-1.136 6.159-1.66c8.737-0.83 12.974-2.097 12.974-3.931 0-1.441-1.791-1.048-4.413 0.917-2.577 1.922-3.276 2.010-6.858 0.655-1.529-0.568-2.752-0.655-5.81-0.437-2.752 0.219-3.888 0.174-3.888-0.174 0-0.83 3.058-2.577 7.426-4.238 4.281-1.66 5.985-2.534 9-4.849 5.199-3.931 14.766-3.451 19.135 0.961 1.572 1.617 3.189 4.805 3.8 7.558 1.048 4.849 2.577 4.5 2.577-0.655 0-4.718-0.961-7.427-3.626-10.004-2.709-2.621-6.159-4.107-10.397-4.456-4.019-0.35-6.509 0.393-12.058 3.451-7.121 3.976-12.014 5.636-13.761 4.674-1.223-0.655-1.005-2.446 1.791-18.13 1.398-7.907 2.927-16.819 3.32-19.834s1.048-6.247 1.486-7.208c0.481-1.048 1.966-2.796 3.844-4.369 5.81-5.024 8.955-10.091 9.873-15.901 0.349-2.49 0.306-3.538-0.306-6.029-0.656-2.752-1.442-4.15-4.893-8.869-1.267-1.704-1.267-1.966 0.043-11.358 0.918-6.334 0.611-9.829-1.267-15.465-4.15-12.451-6.116-21.974-8.125-39.798-1.529-13.718-3.233-20.707-6.772-27.74-0.786-1.572-2.534-5.679-3.932-9.174-4.5-11.446-7.82-15.29-22.28-25.819-9.611-6.99-14.46-10.135-19.877-12.844-1.791-0.873-4.238-2.316-5.461-3.189-2.884-2.053-6.64-3.713-11.14-4.893-3.32-0.874-4.893-1.005-14.416-1.092-5.897-0.043-12.363-0.043-14.416 0.043zM325.853 6.63c0.743 0.873 0.175 1.529-1.354 1.529-1.398 0-1.616-0.481-0.568-1.486 0.83-0.873 1.223-0.873 1.922-0.043zM319.606 7.984c0.481 1.223-0.568 1.66-2.010 0.787-1.748-1.048-1.704-1.486 0.175-1.486 1.005 0 1.66 0.262 1.835 0.699zM450.796 65.65c0 0.35-0.131 0.612-0.262 0.612-0.524 0-1.442-1.529-1.442-2.403 0-0.83 0.043-0.83 0.83 0.174 0.481 0.568 0.873 1.267 0.873 1.617zM451.407 70.499c0.131 1.18 0.393 5.766 0.524 10.266 0.219 6.204 0.175 8.213-0.219 8.213-0.873 0-1.354-2.053-1.616-7.121-0.306-5.198 0.131-13.412 0.699-13.412 0.175 0 0.437 0.918 0.611 2.053zM459.839 115.058c-0.393 14.722-1.048 16.776-1.136 3.364-0.043-11.096 0.219-14.941 0.961-14.198 0.262 0.262 0.349 4.194 0.175 10.834zM430.875 112.438l-0.786 1.66-0.175-1.223c-0.087-0.699 0.219-2.272 0.656-3.495l0.786-2.228 0.131 1.791c0.087 1.049-0.175 2.49-0.611 3.495zM449.354 118.117c-0.524 4.98-5.635 21.799-9.786 32.458-3.408 8.694-7.471 16.164-9.13 16.775-1.486 0.568-1.616-0.481-0.262-2.446 5.417-7.907 14.154-30.58 17.3-44.953 0.656-2.927 1.267-4.325 1.922-4.325 0.131 0 0.087 1.136-0.043 2.49zM454.072 118.772c-0.524 4.543-1.66 9.392-3.32 14.678-2.272 7.121-2.228 7.951 0.524 7.951 1.092 0 1.048 0.131-0.437 1.617-0.699 0.743-1.529 2.316-1.966 3.714-0.437 1.529-1.267 3.101-2.185 4.019-1.791 1.922-2.577 2.053-2.010 0.35 0.262-0.655 1.223-4.718 2.185-9.043s2.709-10.703 3.888-14.198c1.18-3.495 2.402-7.471 2.709-8.868 0.656-3.102 1.005-3.233 0.611-0.219zM427.861 120.519c-0.743 3.364-8.825 22.979-11.882 28.833-2.665 5.067-3.146 3.364-0.961-3.364 1.878-5.941 5.723-15.072 7.252-17.299 0.743-1.049 2.053-3.407 2.971-5.198 2.272-4.587 3.189-5.592 2.621-2.971zM463.334 131.222c-0.087 0.917-0.175 0.174-0.175-1.617s0.087-2.534 0.175-1.66c0.087 0.917 0.087 2.403 0 3.276zM401.954 135.329c0.611 2.665 0.961 12.625 0.437 12.625-0.262 0-0.656-1.005-0.918-2.228-0.743-3.32-1.486-10.791-1.18-11.577 0.437-1.092 1.31-0.481 1.66 1.179zM459.969 146.687c0 0.743-0.175 1.223-0.437 1.048-0.219-0.131-0.437-0.743-0.437-1.355 0-0.568 0.219-1.048 0.437-1.048 0.262 0 0.437 0.612 0.437 1.355zM454.072 147.823c-0.873 2.010-1.529 2.796-1.529 1.748s1.223-3.364 1.748-3.364c0.262 0 0.131 0.743-0.219 1.617zM401.954 155.468c-0.393 0.393-0.524 0.174-0.481-1.005 0-1.398 0.043-1.441 0.481-0.481 0.349 0.743 0.349 1.136 0 1.486zM410.168 154.376c0 1.398-1.922 7.034-2.621 7.732-0.961 0.961-0.437-3.757 0.699-6.334 1.267-2.796 1.922-3.276 1.922-1.398zM469.93 156.779c1.791 1.879 2.709 4.194 2.709 6.858 0 4.369-1.704 5.941-2.272 2.097-0.131-1.136-0.873-3.8-1.616-5.941s-1.354-4.019-1.354-4.15c0-0.699 1.267-0.088 2.534 1.136zM463.683 156.517c0.961 0.393 1.966 2.49 1.966 4.238 0 3.757-2.447 8.213-4.194 7.558-0.524-0.219-0.656-0.568-0.393-1.486 0.131-0.655 0.393-2.403 0.524-3.845 0.262-3.189-0.306-4.543-1.878-4.543-1.223 0-1.922-1.223-1.005-1.791 0.699-0.437 3.932-0.524 4.98-0.131zM442.932 157.653c0 2.097-2.534 5.81-3.364 4.98-0.568-0.568 2.053-5.941 2.927-5.941 0.219 0 0.437 0.437 0.437 0.961zM452.892 163.332c-0.262 0.786-3.714 2.621-8.3 4.456-2.053 0.83-6.902 2.927-10.747 4.631-3.8 1.66-7.252 3.058-7.558 3.058-2.447 0 20.183-11.096 25.163-12.363 1.442-0.35 1.616-0.306 1.442 0.219zM424.147 165.952c0 0.306-0.873 1.66-1.922 3.014s-2.228 3.058-2.621 3.845c-0.611 1.136-2.14 2.228-3.146 2.228-0.656 0 0.087-1.486 1.835-3.757 1.136-1.398 2.49-3.32 3.058-4.238 1.048-1.572 2.796-2.272 2.796-1.092zM457.786 166.389c0 1.441-2.796 3.058-8.3 4.893-4.98 1.617-8.825 2.403-8.082 1.66 0.568-0.612 15.115-7.514 15.858-7.514 0.262 0 0.524 0.437 0.524 0.961zM462.591 172.549c0 0.612-3.451 4.107-5.243 5.286-1.442 0.961-3.626 0.874-4.849-0.174-1.005-0.786-1.005-0.83-0.175-0.874 1.878-0.043 4.281-1.005 5.81-2.359 2.621-2.315 4.456-3.101 4.456-1.879zM439.35 175.389c0.131 0.786-0.175 1.136-1.398 1.617-0.83 0.35-2.053 0.655-2.709 0.655-1.092 0-1.136-0.043-0.524-1.005 0.699-1.048 3.364-2.577 4.063-2.359 0.262 0.088 0.481 0.568 0.568 1.092zM373.034 177.442c0.873 1.048-0.043 1.66-1.223 0.83-0.524-0.35-0.961-0.83-0.961-1.092 0-0.655 1.572-0.437 2.185 0.262zM435.505 179.626c0.611 0.743 0.219 1.529-0.786 1.529-0.873 0-3.233 1.529-6.596 4.238-1.529 1.267-2.49 1.791-2.796 1.486-0.699-0.699 0-1.704 1.616-2.403 1.005-0.437 1.835-1.223 2.402-2.403 0.524-0.961 1.354-2.053 1.878-2.403 1.223-0.874 3.582-0.917 4.281-0.043zM452.106 181.767c0 1.441-4.63 4.456-11.358 7.427-1.31 0.568-4.019 2.446-6.029 4.15-9.48 8.082-16.207 11.795-22.935 12.538-2.402 0.262-2.665 0.219-2.14-0.35 0.481-0.612 7.776-3.583 11.664-4.718 1.092-0.35 2.447-1.31 3.714-2.621 1.136-1.179 2.577-2.272 3.276-2.403 3.058-0.743 4.325-2.577 2.097-3.101-2.272-0.481-2.752-0.655-2.752-1.048 0-0.568 2.577-1.31 4.543-1.31 2.971 0 3.757-0.393 3.757-1.748 0-1.617 1.572-2.839 4.413-3.451 1.18-0.262 3.189-1.005 4.413-1.617 4.5-2.272 7.339-2.927 7.339-1.748zM409.032 184.17c0.131 0.219-0.131 0.874-0.568 1.398-1.136 1.398-2.097 0.612-1.092-0.83 0.699-1.005 1.267-1.223 1.66-0.568zM456.3 187.315c0.437 0.699-5.199 5.985-7.514 6.99l-1.966 0.874 0.262 1.879c0.262 1.704 0.219 1.922-0.743 2.141-0.524 0.174-1.748 0.306-2.665 0.306-1.966 0-4.849 1.136-4.456 1.748 0.131 0.219 0.918 0.437 1.66 0.481 1.398 0 1.398 0-0.568 0.874-2.49 1.136-7.733 2.228-8.825 1.879-1.616-0.481-0.786-1.267 3.233-2.97 0.873-0.35 2.359-1.355 3.276-2.141 0.918-0.83 2.447-1.922 3.408-2.403 1.005-0.481 3.451-2.403 5.461-4.238 3.495-3.189 7.471-5.898 8.606-5.898 0.262 0 0.656 0.219 0.83 0.481zM423.274 189.456c0 0.699-1.966 1.791-3.757 2.053-1.66 0.219-1.66 0.219-0.918-0.568 1.223-1.31 4.675-2.403 4.675-1.486zM422.575 195.528c0.437 0.699-6.858 2.665-9.786 2.665-2.621 0-1.092-1.398 2.621-2.446 2.359-0.655 6.815-0.786 7.164-0.219zM454.553 198.455c-0.175 0.655-0.873 1.704-1.572 2.359-1.442 1.355-5.985 3.364-6.466 2.839-0.175-0.174 0.656-1.136 1.878-2.141 1.18-0.961 2.927-2.534 3.932-3.407 1.878-1.748 2.709-1.617 2.228 0.35zM429.389 207.28c0 0.612-1.878 2.184-3.189 2.665-2.534 0.961-5.548 0.306-4.325-0.917s7.514-2.665 7.514-1.748zM450.184 207.411c1.048 0.262 1.922 0.655 1.922 0.874 0 0.481-0.961 0.655-6.99 1.223-2.752 0.262-6.291 0.874-7.776 1.355-5.373 1.704-7.077 0.786-2.665-1.398 4.368-2.141 11.358-3.101 15.509-2.053zM449.834 212.216c0.393 2.010-6.029 6.727-13.979 10.31-5.199 2.359-6.029 2.621-6.029 1.922 0-1.223 6.422-5.243 9.436-5.898 0.743-0.174 1.922-0.874 2.577-1.572 1.092-1.136 1.136-1.31 0.481-1.572-0.393-0.174-5.505-0.043-11.358 0.262-5.81 0.306-10.878 0.437-11.228 0.35-0.961-0.393 2.359-1.66 6.116-2.359 1.835-0.35 6.858-0.83 11.183-1.048s8.563-0.612 9.392-0.83c2.097-0.568 3.233-0.393 3.408 0.437zM395.751 217.196c0.611 0.743 0.219 1.529-0.83 1.529-0.961 0-1.966-1.092-1.572-1.748s1.791-0.524 2.402 0.219zM449.485 222.351c0 1.572-4.15 3.276-8.956 3.669-2.927 0.219-3.014 0.174-2.097-0.481 1.267-0.961 3.626-1.922 6.902-2.927 3.233-0.961 4.15-1.005 4.15-0.262zM426.026 222.832c0.131 0.35 0 0.874-0.349 1.136-0.743 0.612-2.402-0.131-2.402-1.092 0-0.874 2.447-0.874 2.752-0.043zM431.53 228.511c0.437 0.524 0.349 0.743-0.349 1.092-1.18 0.655-2.359 0.612-3.364-0.174-0.699-0.568-0.743-0.699-0.175-1.092 0.961-0.612 3.32-0.524 3.888 0.174zM446.646 230.914c0.393 0.699-1.966 2.185-4.805 3.058-3.714 1.136-9.786 2.010-10.31 1.486-0.656-0.655 0.306-1.179 4.194-2.446 7.077-2.316 10.397-2.927 10.921-2.097zM403.833 235.326c0.524 0.174 1.18 0.655 1.486 1.048 0.524 0.612 0.437 0.699-0.437 0.699-1.223 0-3.888-1.529-3.888-2.228 0-0.437 0.656-0.306 2.839 0.481zM426.026 235.195c-0.568 0.088-1.442 0.088-1.966 0-0.568-0.088-0.131-0.174 0.961-0.174s1.529 0.088 1.005 0.174zM447.3 237.030c0 0.743-0.437 1.835-1.005 2.446-0.83 0.961-1.616 1.267-4.937 1.748-6.291 0.917-12.188 1.267-13.106 0.743-0.743-0.437-0.699-0.524 0.743-1.136 0.873-0.35 3.844-1.092 6.553-1.572 6.204-1.092 9.305-1.966 10.004-2.839 0.918-1.092 1.748-0.786 1.748 0.612zM414.755 238.515c1.005 0.786 0.481 1.617-1.005 1.617-1.572 0-2.447-0.612-2.14-1.486 0.349-0.874 2.010-0.917 3.146-0.131zM422.182 240.569c0.393 0.655-0.611 1.748-1.572 1.748-1.048 0-1.442-0.786-0.83-1.529s2.010-0.874 2.402-0.219zM419.997 246.029c1.878 0.481 5.417 0.655 12.8 0.655 5.548 0 10.135 0.174 10.135 0.393s-1.048 0.83-2.272 1.398c-1.878 0.786-3.32 1.005-7.645 1.179-7.645 0.262-13.979-1.048-16.12-3.451-0.918-1.005-0.524-1.048 3.101-0.174zM416.152 250.398c4.849 1.791 9.349 2.665 15.639 3.058 5.592 0.35 11.183 1.048 11.97 1.529 0.918 0.481-0.437 1.092-3.626 1.704-5.155 0.961-10.747 0.306-17.78-2.097-4.238-1.441-10.878-4.674-10.878-5.286s-0.131-0.612 4.675 1.092zM419.123 257.649c5.592 1.704 9.349 2.228 16.688 2.185l7.121-0.043 0.262 1.048c0.393 1.704-0.961 3.714-3.233 4.762-1.791 0.83-2.796 0.961-7.514 0.918-5.548-0.043-11.49-1.18-11.402-2.14 0.043-0.262 3.233-0.437 8.693-0.437 8.563 0 10.791-0.262 10.441-1.223-0.087-0.349-2.14-0.656-5.767-0.83-3.101-0.175-7.077-0.611-8.825-1.005-3.276-0.656-9.524-3.014-10.004-3.757-0.349-0.568 0.306-0.481 3.538 0.524zM459.096 268.527c0 0.699-2.010 1.31-4.194 1.31-2.272 0-2.534-0.656-0.481-1.267 1.922-0.568 4.675-0.568 4.675-0.043zM427.118 269.663c8.344 1.529 10.135 1.966 10.135 2.621 0 0.873-6.247 0.83-10.004-0.043-2.839-0.699-5.723-2.14-5.723-2.884 0-0.568 1.267-0.481 5.592 0.306zM430.7 276.303c1.136 0.918 0.873 1.835-0.481 1.835-0.873 0-5.199-2.010-5.199-2.402 0-0.131 1.048-0.219 2.359-0.219 1.616 0 2.665 0.262 3.32 0.786zM177.54 283.817c2.621 1.354 1.267 1.529-9.524 1.354-9.655-0.131-10.965-0.087-15.159 0.786-4.718 1.005-15.946 4.63-20.925 6.772-1.835 0.83-2.927 1.048-3.189 0.786-0.961-0.961 15.334-9.436 19.309-10.091 1.31-0.219 8.213-0.393 15.29-0.349 10.441 0.087 13.149 0.219 14.198 0.743zM450.577 286.438c-0.131 0.219-0.656 0.437-1.092 0.437s-0.961-0.219-1.092-0.437c-0.175-0.262 0.306-0.437 1.092-0.437s1.267 0.175 1.092 0.437zM180.685 289.759c1.136 0.656 1.835 1.267 1.529 1.398-0.874 0.262-5.155-1.18-6.247-2.14l-1.048-0.873 1.835 0.175c1.048 0.131 2.796 0.786 3.931 1.442zM165.22 292.686c5.112 1.354 12.144 4.63 15.946 7.471 2.621 1.966 3.669 3.67 1.879 3.101-2.053-0.656-1.267 1.878 2.534 8.213 2.534 4.238 3.976 7.077 3.976 7.776 0 0.262-0.961-0.393-2.141-1.486-2.185-2.010-3.845-2.796-5.067-2.315-0.961 0.349-0.83 0.786 1.267 3.626 2.927 4.019 3.058 4.325 1.922 5.111l-0.961 0.699 0.786 2.053c2.621 6.858 5.505 15.115 5.985 17.3 0.655 3.101 0.306 3.714-1.835 2.796-3.364-1.398-7.601-5.635-11.97-11.839-3.669-5.243-9.262-8.781-23.547-14.897-9.611-4.063-12.538-4.893-19.266-5.461-14.373-1.223-16.382-1.529-16.382-2.228 0-0.175 0.437-0.611 1.005-0.873 1.966-1.048 5.155-4.063 8.65-8.125 4.631-5.373 9.567-8.65 17.081-11.271 2.97-1.048 3.583-1.092 9.524-0.961 4.98 0.175 7.252 0.437 10.615 1.31zM455.164 293.166c0 0.306-0.306 0.873-0.699 1.18-0.611 0.481-0.786 0.437-1.31-0.219-0.306-0.481-0.481-1.005-0.349-1.18 0.393-0.656 2.359-0.437 2.359 0.219zM478.231 295.045c-0.306 2.49-3.189 3.408-12.188 3.888-7.296 0.393-9.305-0.131-6.815-1.791 1.048-0.656 14.416-3.146 17.474-3.233 1.572-0.043 1.66 0.043 1.529 1.136zM454.465 297.797c0.656 0.656-0.175 1.31-1.66 1.31-1.835 0-2.839-1.005-1.704-1.704 0.786-0.481 2.665-0.262 3.364 0.393zM441.622 297.797c0 0.219-0.481 0.437-1.092 0.437s-1.092-0.219-1.092-0.437c0-0.262 0.481-0.437 1.092-0.437s1.092 0.175 1.092 0.437zM426.594 301.554c0.743 1.835 0.743 1.922-0.043 1.922-0.699 0-1.529-1.66-1.529-3.101 0-1.223 0.83-0.611 1.572 1.18zM439.044 301.336c1.136 0.611 0.656 1.267-0.961 1.267-1.354 0-1.572-0.393-0.743-1.223 0.656-0.656 0.656-0.656 1.704-0.043zM477.356 301.117c0.524 0.175 0.961 0.437 0.961 0.656 0 0.349-2.621 1.18-5.767 1.878-2.709 0.611-0.568 2.053 3.101 2.185 3.146 0.043 3.32 1.005 0.393 2.097-2.577 0.961-12.276 1.835-16.295 1.442-6.247-0.568-5.067-1.66 2.315-2.14 4.587-0.262 7.077-1.048 7.077-2.185 0-0.786-1.748-1.223-4.98-1.136-5.024 0.131-5.942 0.043-5.942-0.611 0-0.349 0.306-0.699 0.656-0.873 0.568-0.219 5.592-0.918 9.392-1.267 2.752-0.306 8.082-0.306 9.087-0.043zM445.903 302.471c-0.087 0.437-0.699 0.961-1.354 1.18-0.961 0.349-1.354 0.262-1.966-0.306-0.656-0.699-0.656-0.83-0.087-1.18 0.349-0.219 1.31-0.437 2.097-0.437 1.136 0 1.442 0.175 1.31 0.743zM452.368 302.384c0.699 0.568 0.743 0.699 0.175 1.092-1.442 0.961-3.844 0.219-3.364-1.048 0.349-0.873 2.053-0.918 3.189-0.043zM188.548 307.058c2.403 2.534 5.374 7.208 5.374 8.563 0 0.918-0.088 1.005-0.699 0.481-0.35-0.306-1.048-1.267-1.486-2.14-0.437-0.83-1.879-2.971-3.233-4.718-2.359-3.014-2.839-4.019-2.097-4.019 0.174 0 1.136 0.83 2.141 1.835zM449.834 308.369c0.175 0.961-1.835 1.529-2.752 0.786-0.524-0.437-0.568-0.699-0.131-1.18 0.656-0.83 2.709-0.568 2.884 0.393zM447.082 313.655c1.005 0.743 0.481 1.092-2.097 1.442-2.185 0.306-5.417-0.043-6.422-0.699-0.568-0.393-0.568-0.481 0-0.873 1.005-0.656 7.558-0.524 8.519 0.131zM138.746 318.81c8.606 1.18 20.008 6.684 31.148 15.072 5.985 4.5 9.829 8.475 11.358 11.708 0.699 1.442 2.577 4.15 4.194 5.942 7.776 8.737 10.747 13.979 12.013 21.231 3.233 18.829 1.572 37.133-5.329 57.841-2.053 6.247-3.101 8.519-4.107 8.912-1.179 0.437-5.461 0.306-5.461-0.175 0-0.699 1.617-1.922 3.189-2.447 1.31-0.437 1.398-0.611 1.66-3.058 0.174-1.398 0.699-3.757 1.223-5.155 1.66-4.675 0.961-5.067-1.748-1.048-1.048 1.529-2.708 3.538-3.714 4.5-1.267 1.18-2.927 3.714-5.024 7.645-5.112 9.611-7.645 13.062-13.324 17.998-5.985 5.199-15.815 10.965-22.542 13.193-11.839 3.888-24.071 4.718-33.9 2.272-5.854-1.486-13.106-4.849-12.276-5.723 0.481-0.437 5.198-1.048 12.189-1.529 10.878-0.743 13.412-1.486 16.469-4.98 2.097-2.359 7.47-13.019 9.349-18.61 1.966-5.723 2.228-12.669 0.874-22.105-1.704-11.708-2.359-13.63-7.514-21.625-1.617-2.534-3.582-5.81-4.325-7.296-0.743-1.442-1.966-3.189-2.709-3.8-4.194-3.538-15.334-6.334-25.338-6.334-4.106 0-5.243-0.131-5.81-0.699-0.656-0.656-0.656-0.786 0.043-1.529 0.393-0.481 1.005-0.83 1.355-0.83 1.442 0 10.703-10.921 11.314-13.411 0.437-1.66-0.393-2.185-2.184-1.31-1.005 0.437-2.272 1.791-3.669 3.888-1.18 1.791-2.621 3.451-3.189 3.714s-2.359 1.616-3.931 3.014c-3.975 3.538-13.368 8.038-16.731 8.038-1.617 0-2.447 0.437-2.447 1.354 0 1.048-1.791 1.529-3.102 0.83-0.961-0.524-0.961-0.568-0.699-8.475 0.393-10.615 0.787-12.757 3.189-17.606 1.092-2.228 1.922-4.281 1.791-4.587-0.131-0.349-1.486 0.743-3.538 2.839-5.723 5.942-8.344 12.887-6.072 16.295 0.524 0.83 0.699 2.053 0.655 4.893-0.044 4.937-1.005 9.436-3.407 15.858-4.718 12.669-8.519 26.517-8.519 31.061 0 4.805 1.31 8.475 4.106 11.445 2.49 2.621 2.621 2.402 2.272-5.548-0.437-10.135 0.786-17.125 5.461-31.76 2.752-8.519 5.111-11.795 7.208-10.048 1.092 0.918 0.743 2.534-1.049 5.155-5.242 7.733-8.519 17.998-9.087 28.57-0.349 6.728 0.306 10.834 2.49 15.639 0.961 2.053 1.922 4.893 2.228 6.291 0.481 2.49 0.656 2.752 6.466 8.737 3.276 3.364 7.339 7.383 8.999 8.912 1.704 1.529 3.058 3.101 3.058 3.495 0 1.136-3.058 0.786-5.198-0.656-2.534-1.66-12.713-11.708-17.605-17.387-7.077-8.213-13.673-19.135-13.673-22.673 0-0.918-0.437-3.67-0.961-6.072-0.786-3.844-0.961-5.942-0.961-14.722-0.044-9.699 0.044-10.921 1.617-21.406 2.447-16.688 3.364-20.008 8.344-29.531 6.465-12.32 14.853-23.022 18.959-24.159 0.83-0.262 3.276-1.572 5.461-2.971 7.558-4.762 18.217-8.432 18.217-6.291 0 0.262-1.617 1.66-3.582 3.189-5.243 3.976-11.708 10.397-11.708 11.577 0 0.568 0.219 1.005 0.481 1.005 0.306 0 2.316-1.354 4.499-2.971 4.936-3.714 8.737-6.029 17.081-10.485l6.553-3.538h12.757c6.99-0.043 14.285 0.175 16.164 0.437zM430.7 320.95c0 0.611-0.219 1.398-0.437 1.748-0.306 0.481-0.437-0.043-0.437-1.748s0.131-2.228 0.437-1.748c0.219 0.349 0.437 1.136 0.437 1.748zM445.335 319.203c0.393 0.656-0.568 1.748-1.529 1.748s-1.922-1.092-1.529-1.748c0.131-0.219 0.83-0.437 1.529-0.437s1.398 0.219 1.529 0.437zM256.655 321.737c3.058 2.228 6.247 6.553 5.548 7.601-0.524 0.918-5.854-3.408-7.601-6.159-1.879-2.927-0.917-3.582 2.053-1.442zM208.207 337.071c1.966 1.398 3.626 3.538 3.626 4.543 0 0.918-1.704 2.053-3.058 2.053-1.486 0-3.058-1.136-3.058-2.228s-0.786-2.665-1.572-3.146c-0.655-0.349-0.83-1.704-0.306-2.185 0.655-0.699 2.752-0.219 4.369 0.961zM461.673 336.197c0.873 0.568-0.437 1.18-3.67 1.748-7.471 1.267-13.106 0.961-11.533-0.656 0.349-0.349 1.529-0.786 2.621-1.005 2.577-0.524 11.795-0.568 12.582-0.087zM206.328 351.705c0.393 0.83 0.699 1.922 0.699 2.49 0 0.918-0.043 0.918-0.83 0.219-0.83-0.743-1.879-3.932-1.441-4.368 0.35-0.393 0.83 0.087 1.572 1.66zM260.543 372.107c-2.709 1.267-5.679 1.048-4.543-0.349 0.349-0.393 1.486-0.568 3.408-0.524l2.884 0.043-1.748 0.83zM241.496 374.641c1.005 0.656 0.219 1.791-1.223 1.791-1.355 0-2.010-0.918-1.223-1.704 0.568-0.568 1.617-0.611 2.446-0.087zM340.445 377.917c5.592 2.315 10.31 4.98 13.455 7.558 7.645 6.334 24.464 15.247 35.211 18.654 1.966 0.611 4.413 1.529 5.417 2.053 2.839 1.442 13.543 1.966 26.124 1.267 5.417-0.306 11.315-0.656 13.149-0.743 2.884-0.175 3.364-0.087 3.626 0.568 0.219 0.611-0.437 1.486-2.621 3.538-3.932 3.714-5.373 4.019-5.417 1.092 0-1.572-1.748-1.223-7.077 1.529l-4.893 2.49-9.217 0.393c-11.577 0.481-12.669 0.481-13.805-0.131-1.616-0.873-0.306-1.398 5.155-2.010 12.887-1.529 12.757-2.402-0.437-2.884-5.067-0.219-11.183-0.656-13.499-1.005-8.344-1.267-30.056-9.305-30.056-11.14 0-1.005 1.136-0.786 4.675 0.786 6.334 2.839 24.333 8.213 31.716 9.48 1.791 0.306 3.364-0.043 3.364-0.699 0-0.568-1.66-1.18-7.471-2.621-9.699-2.402-24.421-8.038-33.551-12.887-2.49-1.31-5.505-2.621-6.684-2.839-1.486-0.349-2.796-1.005-3.976-2.097-2.185-1.922-7.252-8.213-8.563-10.529-0.961-1.704-0.961-1.748-0.131-1.748 0.481 0 2.927 0.873 5.505 1.922zM208.032 378.529c0.917 1.005 0.568 1.398-1.223 1.398-1.66 0-2.665-0.873-1.879-1.66s2.315-0.611 3.101 0.262zM319.738 378.834c2.097 1.092 2.709 2.185 3.101 5.767 0.524 5.111 2.272 9.392 5.635 13.63 2.010 2.534 6.902 5.985 7.558 5.329 0.481-0.481-0.306-1.66-4.368-6.728-4.5-5.592-3.757-5.505 3.626 0.393 5.679 4.543 9.48 7.077 13.805 9.13 3.495 1.704 4.5 1.878 4.893 0.873 0.306-0.83-1.18-2.402-2.315-2.402-1.092 0-9.13-5.417-13.237-8.912-4.456-3.8-5.111-4.98-5.461-9.611-0.131-2.14-0.087-3.757 0.131-3.714 0.219 0 0.918 1.136 1.572 2.49 1.704 3.626 3.8 5.854 9.043 9.567 5.505 3.888 15.202 9.961 17.693 11.096 1.005 0.437 2.49 1.616 3.364 2.621l1.572 1.878 4.587 0.524c3.364 0.437 6.116 1.092 10.223 2.577 6.858 2.49 11.97 4.805 11.97 5.417 0 1.005-2.665 0.918-16.863-0.611-16.426-1.748-21.45-2.447-36.434-4.98-10.179-1.748-17.474-2.621-17.474-2.097 0 1.442 17.474 5.548 32.764 7.688 11.096 1.572 18.654 2.228 32.109 2.709 7.208 0.262 13.368 0.656 13.717 0.83 0.437 0.219-0.262 0.524-1.966 0.873-1.878 0.393-5.635 0.481-13.717 0.306-18.043-0.437-30.624-1.835-48.273-5.329-14.111-2.796-15.945-3.101-15.945-2.49 0 2.621 18.959 7.034 40.628 9.48 8.344 0.918 18.959 1.529 28.396 1.572 4.456 0.043 8.694 0.219 9.392 0.393l1.31 0.306-1.092 0.437c-2.796 1.18-10.223 3.058-17.474 4.5-14.897 2.927-24.901 3.626-36.696 2.447-9.699-0.918-13.193-1.048-13.411-0.393-0.437 1.267 7.907 3.276 17.125 4.063 9.392 0.83 13.019 1.267 13.455 1.704 0.786 0.786-1.922 1.092-9.305 1.092-8.781 0-11.402-0.393-24.245-3.495-9-2.185-16.382-3.364-16.382-2.665 0 0.611 2.228 1.354 13.019 4.413 6.159 1.791 11.839 3.451 12.538 3.757 1.223 0.481 1.267 0.524 0.481 1.092-2.097 1.572-9.961 1.354-16.251-0.437-6.204-1.791-12.407-5.024-12.407-6.422 0-1.529-6.99-7.863-15.465-14.067-6.509-4.762-11.533-7.733-15.159-9-3.189-1.136-4.106-1.835-3.757-2.796 0.175-0.393 2.010-2.010 4.106-3.626 4.937-3.844 9.829-8.125 17.387-15.202 15.334-14.373 18.217-16.164 22.498-13.979zM300.647 382.154c0.306 0.481 0.087 1.136-0.786 2.534-2.14 3.189-2.402 3.233-12.494 2.359-5.548-0.481-8.432-0.873-7.776-1.048 1.398-0.481 11.315-1.704 13.849-1.748 1.136-0.043 2.534-0.175 3.146-0.349 0.873-0.262 0.524-0.481-2.315-1.31-1.835-0.524-3.364-1.092-3.364-1.18 0-0.131 2.097-0.131 4.63-0.087 3.67 0.087 4.762 0.262 5.111 0.83zM232.672 382.985c-2.010 0.611-11.664 1.31-17.824 1.31-7.907 0-7.383-0.873 0.917-1.442 4.543-0.349 18.086-0.219 16.906 0.131zM271.596 386.349c-0.437 0.087-1.223 0.087-1.748 0-0.568-0.087-0.219-0.175 0.743-0.175 0.961-0.043 1.398 0.043 1.005 0.175zM227.691 388.271c-0.655 0.656-12.101 1.048-16.513 0.568-3.364-0.349-3.407-0.349-1.529-0.656 3.626-0.481 18.566-0.437 18.042 0.087zM100.827 389.625c1.66 5.286 4.412 20.358 4.368 23.896v2.447l-0.874-2.402c-1.398-3.888-4.762-21.363-4.762-24.639 0-1.223 0.787-0.743 1.267 0.699zM108.035 393.382c1.66 5.243 2.971 12.144 3.189 16.776 0.262 4.893-0.306 5.679-1.398 2.010s-3.32-15.552-3.582-19.309c-0.35-4.368 0.306-4.194 1.791 0.524zM258.577 391.023c-1.092 1.048-3.189 1.092-2.796 0.043 0.174-0.393 0.83-0.656 1.835-0.656 1.398 0 1.486 0.087 0.961 0.611zM292.652 390.849c1.223 0.786-0.306 1.529-3.014 1.529-2.49-0.043-4.238-0.743-3.714-1.572 0.306-0.524 5.897-0.481 6.728 0.043zM90.124 396.091c1.355 8.3 2.883 18.435 2.883 19.265 0 0.437-0.262 0.83-0.612 0.83-1.136 0-2.971-10.615-3.582-20.314-0.35-5.897 0.306-5.81 1.311 0.219zM445.466 391.81c1.31 1.31 0 4.238-2.402 5.286-2.621 1.136-8.563 2.49-10.921 2.49-1.18 0-2.534-0.262-2.971-0.611-0.743-0.524-0.656-0.611 0.918-0.873 2.185-0.437 8.606-3.408 10.615-4.98 2.447-1.878 3.8-2.272 4.762-1.31zM96.022 397.27c0.874 4.15 2.665 15.421 2.665 16.601 0 0.306-0.174 0.568-0.393 0.568-1.005 0-3.364-11.533-3.757-18.479-0.35-5.461 0.219-4.98 1.486 1.31zM83.833 393.95c0 0.175 0.612 3.844 1.311 8.125 0.743 4.281 1.311 8.519 1.311 9.436 0 1.486-0.088 1.616-0.83 1.18-0.568-0.306-1.049-1.398-1.529-3.364-0.918-4.194-2.184-15.596-1.835-16.557 0.306-0.786 0.35-0.786 0.961 0 0.35 0.481 0.612 1.005 0.612 1.18zM218.167 392.989c0.655 1.136-5.374 2.185-9.174 1.616-2.141-0.349-2.446-1.092-0.612-1.616 1.617-0.481 9.48-0.437 9.786 0zM280.726 393.863c9.262 0.699 8.169 1.616-2.402 2.010-6.466 0.262-15.509-0.175-16.12-0.83-0.568-0.568 0.349-0.786 4.98-1.092 6.684-0.481 7.601-0.481 13.543-0.087zM78.591 399.061c0.262 1.398 0.437 3.014 0.35 3.626-0.174 0.918-0.262 0.786-0.699-0.743-0.306-1.005-0.656-2.752-0.83-3.888-0.393-2.971 0.481-2.228 1.18 1.005zM394.004 398.799c4.413 1.267 4.893 1.835 1.31 1.529-3.451-0.262-6.029-1.005-7.471-2.14l-1.048-0.873 1.966 0.306c1.092 0.131 3.451 0.699 5.243 1.18zM71.776 399.236c0.35 0.786 0.743 3.101 0.918 5.155 0.35 4.587 1.748 13.368 2.578 16.557 0.83 3.058 0.219 4.587-0.83 2.097-1.835-4.413-4.718-25.207-3.451-25.207 0.131 0 0.481 0.656 0.787 1.398zM209.868 398.712c0.174 0.262-0.306 0.437-1.092 0.437s-1.267-0.175-1.092-0.437c0.131-0.262 0.655-0.437 1.092-0.437s0.961 0.175 1.092 0.437zM281.993 399.279c0.743 0.699-0.656 0.918-8.475 1.223-4.5 0.175-9.305 0.481-10.659 0.656-2.359 0.262-2.534 0.219-2.534-0.611 0-1.048 0.961-1.31 5.897-1.572 5.024-0.219 15.421-0.043 15.771 0.306zM116.117 401.639c0.699 2.884 0.961 5.723 0.524 5.985-0.524 0.349-1.311-2.053-1.66-5.111-0.306-2.884 0.437-3.495 1.136-0.873zM443.151 400.459c0.918 1.442-3.888 4.368-5.111 3.146-0.699-0.699 0.306-1.748 2.49-2.752 2.053-0.961 2.272-0.961 2.621-0.393zM232.365 401.027c0 0.83-0.917 1.616-1.835 1.616-0.786 0-1.092-1.267-0.481-1.878 0.524-0.524 2.316-0.306 2.316 0.262zM276.051 404.391c1.267 0.786-0.262 1.398-4.063 1.616-6.029 0.393-9.829-0.568-6.291-1.572 1.835-0.524 9.524-0.568 10.353-0.043zM245.035 405.745c0 0.656-2.141 1.835-2.839 1.529-1.048-0.393-0.743-1.486 0.568-1.922 1.223-0.437 2.272-0.262 2.272 0.393zM255.519 406.313c0 0.786-1.179 1.223-2.315 0.873-0.874-0.262-0.874-0.306-0.088-0.873 1.048-0.786 2.403-0.786 2.403 0zM223.322 406.444c0.393 0.393-0.961 1.878-1.748 1.878-0.83 0-0.699-1.18 0.219-1.704 0.874-0.524 1.179-0.568 1.529-0.175zM234.55 406.575c0.481 0.306 0.262 0.437-0.874 0.437s-1.355-0.131-0.874-0.437c0.35-0.219 0.743-0.437 0.874-0.437s0.524 0.219 0.874 0.437zM267.664 410.594c1.31 1.31-0.306 2.839-2.272 2.097-1.092-0.393-1.529-1.66-0.83-2.315 0.481-0.481 2.534-0.349 3.101 0.219zM129.878 414.046c0.524 1.704 0.655 3.276 0.481 4.281l-0.306 1.572-0.612-1.18c-0.743-1.442-1.398-8.038-0.743-7.645 0.262 0.175 0.786 1.486 1.179 2.971zM247.219 411.337c0 0.262-0.437 0.743-0.961 1.092-1.179 0.83-2.097 0.219-1.223-0.83 0.612-0.699 2.185-0.918 2.185-0.262zM259.014 411.38c-0.349 0.219-1.048 0.437-1.529 0.437s-1.18-0.219-1.529-0.437c-0.481-0.306-0.043-0.437 1.529-0.437s2.010 0.131 1.529 0.437zM125.16 416.186c0.306 1.572 1.136 4.413 1.835 6.334 1.529 4.194 2.053 6.334 1.485 6.334-1.005 0-6.073-13.849-5.548-15.159 0.088-0.349 0.568-0.568 0.961-0.481 0.524 0.087 0.874 0.918 1.267 2.971zM69.635 427.064c0.262 1.529 0.219 1.878-0.262 1.704-1.398-0.437-1.879-2.665-2.010-8.868l-0.088-6.116 1.005 5.679c0.568 3.101 1.18 6.553 1.355 7.601zM260.892 417.147c-0.743 0.349-1.267 0.349-1.966 0-0.873-0.393-0.786-0.481 0.961-0.481s1.835 0.087 1.005 0.481zM406.498 418.589c2.884 0.873 3.582 1.354 2.971 1.966-0.699 0.699-5.199 0.087-6.378-0.873-1.005-0.786-0.743-1.748 0.481-1.748 0.393 0 1.748 0.306 2.927 0.656zM120.136 420.817c2.578 3.757 7.82 15.989 7.82 18.261 0 1.048-2.49 3.626-3.014 3.101-0.699-0.699-7.034-21.493-7.034-23.11 0-0.786 1.005 0 2.228 1.748zM277.188 419.724c4.019 1.223 10.615 4.63 14.985 7.733 10.878 7.82 34.861 29.881 34.469 31.847-0.175 1.092-2.927 1.267-4.805 0.306-0.786-0.393-2.49-1.66-3.714-2.839-1.267-1.136-3.8-2.971-5.635-4.106-1.835-1.092-5.417-3.538-7.995-5.417-12.8-9.436-24.988-15.334-35.211-17.081-2.839-0.437-5.373-1.048-5.679-1.31s-0.699-1.136-0.83-1.966c-0.568-2.884 1.704-6.291 5.024-7.601 1.835-0.743 6.291-0.524 9.392 0.437zM118.214 433.879c1.966 6.728 3.626 12.8 3.626 13.456 0 1.66-1.223 2.053-2.228 0.786-1.005-1.223-2.184-4.98-5.198-16.557-1.267-4.849-2.184-9.087-2.010-9.48 0.131-0.437 0.656-0.656 1.223-0.568 0.874 0.131 1.355 1.354 4.587 12.363zM255.345 425.010c0.437 0.699-1.092 1.66-2.752 1.66-1.617 0-2.446-1.092-1.398-1.791 0.874-0.568 3.8-0.481 4.15 0.131zM457.349 424.923c1.136 0.699 0.131 0.961-5.548 1.354-3.058 0.175-7.121 0.437-8.955 0.611-5.767 0.437-3.757-1.092 2.49-1.922 4.194-0.524 11.228-0.568 12.014-0.043zM102.181 426.234c0 0.437-0.174 0.961-0.437 1.092-0.262 0.175-0.437-0.306-0.437-1.092s0.174-1.267 0.437-1.092c0.262 0.131 0.437 0.656 0.437 1.092zM434.85 427.108c0.175 0.262-0.656 0.437-2.185 0.437s-2.359-0.175-2.185-0.437c0.131-0.262 1.136-0.437 2.185-0.437s2.053 0.175 2.185 0.437zM421.089 429.248c0 0.437-4.456 2.402-6.466 2.839-1.922 0.437-1.922-0.743 0-1.748 2.621-1.354 6.466-2.010 6.466-1.092zM450.272 433.966c0.873 0.219 0.437 0.656-3.582 3.626-10.878 8.082-12.844 8.737-23.11 7.863-8.431-0.743-11.358-1.66-7.863-2.577 2.577-0.656 4.63-0.873 12.363-1.354 7.995-0.524 10.485-0.83 10.485-1.31 0-0.786-5.679-2.185-8.955-2.185-2.315 0-3.276-0.349-3.276-1.136 0-0.83 2.010-1.748 5.111-2.272 1.529-0.262 3.101-0.699 3.495-0.961 0.786-0.481 13.281-0.262 15.334 0.306zM97.070 433.923c0.393 0.437-0.961 2.796-1.617 2.796-0.918 0-1.136-0.481-0.612-1.486 0.699-1.354 1.617-1.878 2.228-1.31zM264.911 435.015c-3.844 1.442-7.383 2.053-7.82 1.354-0.481-0.83 0.262-1.835 1.66-2.228 0.743-0.219 3.233-0.393 5.505-0.437h4.15l-3.495 1.31zM78.067 436.981c0.174 2.665-0.743 2.097-1.092-0.699-0.219-1.486-0.131-1.835 0.35-1.66 0.393 0.131 0.656 1.005 0.743 2.359zM277.93 435.67c1.748 0.918 3.364 2.359 3.364 3.058 0 0.656-11.97 4.543-13.936 4.543-0.961 0-1.704-0.437-2.752-1.572-0.786-0.873-1.442-1.791-1.442-2.053 0-0.219 1.616-0.961 3.626-1.616 2.402-0.786 4.019-1.572 4.762-2.402 1.005-1.048 1.354-1.18 3.058-0.918 1.048 0.131 2.534 0.568 3.32 0.961zM403.702 435.845c-1.878 1.529-5.767 2.752-9.13 2.796-5.461 0.087-4.019-1.048 3.582-2.796 1.922-0.437 4.194-0.83 5.024-0.83h1.529l-1.005 0.83zM106.55 437.111c0 1.616-0.656 2.097-1.267 0.961-0.743-1.354-0.568-2.228 0.393-2.228 0.656 0 0.874 0.306 0.874 1.267zM253.117 440.17c0.961 0.437 3.931 2.534 6.553 4.63 4.543 3.626 11.577 8.475 19.003 13.019 4.325 2.621 5.111 3.495 4.413 4.805-0.306 0.524-1.616 1.835-2.927 2.839-1.267 1.048-4.849 4.325-7.907 7.208-6.159 5.897-9.13 8.3-15.639 12.757-6.378 4.368-8.825 6.291-13.368 10.529-7.121 6.553-14.81 12.407-16.295 12.407-1.179 0-0.83-2.053 0.481-2.927 2.403-1.66 3.8-3.538 6.029-8.213 2.403-5.067 3.931-7.296 8.431-12.407 2.796-3.233 3.101-3.844 2.184-4.762-1.529-1.529-3.757-0.437-12.975 6.466-3.931 2.884-8.038 5.81-9.174 6.422-1.092 0.656-3.669 2.884-5.723 4.937-3.845 3.932-12.232 9.961-13.062 9.436-0.874-0.568-0.524-1.486 1.486-3.8 1.092-1.267 1.966-2.621 1.966-3.014 0-2.884 16.033-19.353 21.537-22.105 2.403-1.223 3.931-2.621 3.583-3.233-0.481-0.743-4.805-0.481-7.907 0.481-1.66 0.481-4.674 1.835-6.727 3.014-2.053 1.136-6.378 3.495-9.611 5.243-8.038 4.281-13.98 8.3-17.999 12.144-1.835 1.791-3.583 3.101-3.845 2.927-0.917-0.568-0.393-3.058 1.441-6.422 2.359-4.5 9.349-13.805 11.839-15.858 1.092-0.873 4.15-2.534 6.815-3.714 9.174-4.063 14.067-7.077 13.368-8.213-0.524-0.873-3.538-0.611-4.849 0.393-0.655 0.524-2.053 1.136-3.145 1.31-1.092 0.219-4.849 1.748-8.387 3.408-3.495 1.66-7.077 3.146-7.907 3.32s-4.281 1.529-7.645 3.058c-9.043 4.019-10.529 4.413-12.101 2.971-1.355-1.223-0.961-2.621 1.355-4.937 4.412-4.413 16.863-11.445 25.163-14.198 5.636-1.878 5.155-1.66 19.659-9.611 12.582-6.902 17.213-8.912 23.372-10.223 5.198-1.092 6.334-1.092 8.519-0.087zM384.829 439.733c0 1.18-4.063 2.228-5.505 1.442-0.743-0.437-0.699-0.524 0.699-1.136 1.66-0.743 4.805-0.918 4.805-0.306zM111.705 441.175c0.612 0.611 0.699 2.097 0.131 2.097-0.481 0-1.791-1.704-1.791-2.272 0-0.524 1.092-0.393 1.66 0.175zM292.303 443.796l3.626 1.398-3.276 1.048c-12.45 3.932-15.945 4.587-18.305 3.408-3.932-2.053-2.228-4.15 4.718-5.767 1.791-0.393 3.844-1.005 4.587-1.31 1.835-0.83 4.281-0.481 8.65 1.223zM92.264 445.106c2.578 5.329 1.748 7.296-0.874 2.14-1.486-2.884-1.879-5.067-0.874-4.762 0.262 0.087 1.049 1.267 1.748 2.621zM81.649 445.849c0 1.18-0.83 1.572-1.617 0.786s-0.393-1.616 0.787-1.616c0.524 0 0.83 0.306 0.83 0.83zM323.407 446.81c2.752 1.267-0.175 1.791-3.233 0.568-0.961-0.393-1.748-0.918-1.748-1.136 0-0.568 3.32-0.175 4.98 0.568zM411.653 447.378c3.932 1.092 4.98 1.572 3.495 1.572-1.966 0-24.639 2.621-26.605 3.058-1.18 0.262-2.971 0.873-3.932 1.31-1.966 0.961-10.004 2.010-11.752 1.572-2.839-0.699-0.087-2.402 4.762-2.971 2.053-0.219 5.155-0.786 6.902-1.267 17.038-4.805 20.183-5.155 27.129-3.276zM217.076 447.815c0 1.31-10.135 6.728-15.901 8.519-3.714 1.136-5.155 1.18-6.16 0.043-1.179-1.267-0.568-2.097 1.835-2.402 3.276-0.393 6.509-1.442 11.271-3.582 6.553-3.014 8.956-3.714 8.956-2.577zM178.806 450.349c-1.179 2.359-5.024 6.815-10.091 11.752-5.941 5.81-8.781 7.907-12.363 9.262-1.572 0.568-3.845 1.572-5.024 2.14-3.189 1.616-7.252 2.839-12.451 3.844-2.534 0.481-5.112 1.005-5.767 1.136-2.053 0.481-1.398-0.568 1.092-1.748 2.359-1.092 5.374-1.966 10.004-2.884 3.407-0.656 12.625-5.329 18.697-9.48 4.15-2.839 5.636-4.194 8.825-7.995 3.583-4.325 7.339-8.038 7.689-7.688 0.088 0.131-0.174 0.83-0.612 1.66zM301.651 450.305c1.267 0.481 2.752 1.223 3.276 1.66 1.005 0.786 1.005 0.786 0.087 1.267-0.918 0.524-16.207 2.709-18.741 2.709-0.786 0-1.572-0.175-1.704-0.437-0.437-0.656 1.835-2.49 4.063-3.32 1.136-0.393 3.32-1.31 4.893-1.966 3.146-1.354 4.325-1.31 8.125 0.087zM183.831 452.533c-2.403 4.762-5.679 9.087-6.815 9.087-1.048 0-0.568-1.18 1.966-5.111 3.276-4.937 5.505-7.514 5.679-6.553 0.088 0.349-0.306 1.529-0.83 2.577zM421.308 450.479c0 1.048-1.66 1.442-2.665 0.611-0.918-0.743 0.087-1.791 1.529-1.616 0.786 0.087 1.136 0.393 1.136 1.005zM345.032 453.494c1.442 0.786 4.106 3.67 3.757 4.15-0.656 1.136-17.256 0.786-19.44-0.393-1.354-0.743-0.743-1.136 3.538-2.359 7.296-2.097 10.135-2.447 12.144-1.398zM364.428 454.018c4.762 1.398 2.228 2.272-6.684 2.315-4.368 0.043-5.767-0.131-6.946-0.743-1.878-0.918-2.097-1.529-0.83-2.185 1.486-0.786 11.271-0.349 14.46 0.611zM93.356 456.464c1.442 2.14 2.097 3.844 1.442 3.844-0.787 0-3.538-3.626-3.538-4.675 0-1.486 0.699-1.223 2.097 0.83zM314.32 457.076c2.621 1.223 4.106 2.665 3.32 3.189-0.743 0.437-17.038 1.398-18.654 1.048-1.442-0.262-2.402-0.873-2.402-1.486s1.878-1.223 6.378-2.14c2.228-0.437 4.587-1.092 5.243-1.486 1.529-0.83 3.058-0.611 6.116 0.873zM408.507 457.339c-0.656 0.656-6.204 2.402-9.567 2.971-2.796 0.524-3.276 0.481-4.238-0.175-1.398-0.873-1.442-1.486-0.131-1.748 0.83-0.175 9.043-1.31 12.101-1.704 1.442-0.175 2.359 0.131 1.835 0.656zM191.345 458.168c1.136 0.611 0.655 1.267-0.961 1.267-1.704 0-1.748-1.267-0.043-1.704 0.088-0.043 0.524 0.175 1.005 0.437zM61.466 460.615c2.097 2.796 2.228 3.364 0.83 4.238-1.179 0.786-8.606 2.839-9.349 2.577-1.398-0.481-0.48-2.402 2.752-5.81 1.835-1.922 3.451-3.495 3.626-3.495 0.131 0 1.092 1.136 2.141 2.49zM103.535 460.309c1.005 0.568 1.092 2.097 0.174 2.49-0.874 0.306-2.403-1.048-2.403-2.14 0-0.873 0.918-1.005 2.228-0.349zM380.461 460.877c1.572 0.393 4.456 0.786 6.466 0.961 1.966 0.175 3.714 0.481 3.844 0.699 0.873 1.442-9.742 3.014-15.072 2.272-3.844-0.568-10.791-2.228-12.014-2.839-3.364-1.791 9.961-2.621 16.776-1.092zM360.016 464.416c3.276 1.092 6.422 2.010 6.99 2.010 0.524 0 1.31 0.219 1.66 0.437 0.524 0.306 0.524 0.481 0.087 0.961-1.092 1.092-8.825 0.611-14.722-0.918-5.461-1.442-9.829-3.189-9.829-3.932 0-0.786 1.048-0.918 5.461-0.743 3.757 0.175 5.243 0.481 10.353 2.185zM325.417 465.77c4.543 1.223 7.077 2.315 7.339 3.146 0.262 0.873-2.053 0.699-8.563-0.524-7.601-1.486-11.445-2.665-11.445-3.582 0-0.611 0.524-0.656 4.281-0.437 2.402 0.131 6.029 0.743 8.387 1.398zM81.736 469.44c7.733 3.014 11.49 4.413 19.397 7.296 0.961 0.349 2.141 0.918 2.621 1.31 0.743 0.611 0.612 0.656-2.053 0.481-4.587-0.306-26.343-9.217-28.614-11.708-0.393-0.437-0.612-0.83-0.481-0.83 0.174 0 4.281 1.529 9.13 3.451zM167.405 477.608c1.092 1.136-4.15 3.976-8.082 4.413l-2.316 0.219 0.874-0.918c2.053-2.097 8.563-4.675 9.524-3.714zM127.082 479.531c0 0.219-0.568 0.437-1.311 0.437-0.699 0-1.311-0.219-1.311-0.437 0-0.262 0.612-0.437 1.311-0.437 0.743 0 1.311 0.175 1.311 0.437zM139.315 481.628c0 0.656-3.145 1.922-3.626 1.442-0.874-0.873 0.043-1.791 1.879-1.791 0.961 0 1.748 0.175 1.748 0.349zM171.554 482.283c0.174 0.873-1.092 1.486-1.748 0.83s-0.043-1.922 0.83-1.748c0.437 0.087 0.83 0.481 0.917 0.918zM184.835 486.433c1.31 1.31-2.621 2.010-4.281 0.743-0.699-0.568-0.743-0.699-0.174-1.092 0.743-0.524 3.845-0.262 4.456 0.349zM141.018 488.268c4.5 0.393 5.286 0.611 4.718 1.18-1.005 0.961-20.62 0.918-21.581-0.043-1.267-1.267 8.388-1.878 16.863-1.136zM184.573 501.024c0.393 0.611-1.005 1.66-2.316 1.66-1.179 0-1.835-1.223-0.961-1.791s2.927-0.481 3.276 0.131z M119.437 326.543c-5.81 2.228-8.519 3.146-10.79 3.8-1.398 0.349-2.534 0.873-2.534 1.092 0 0.786 3.626 1.354 11.052 1.748 4.15 0.175 9.043 0.699 10.878 1.048 6.16 1.31 21.144 6.728 27.653 10.004 5.592 2.796 13.149 9.13 14.46 12.101 0.786 1.791 0.961 1.922 3.888 2.402 0.961 0.175 3.407 0.873 5.417 1.572s4.063 1.267 4.5 1.267c0.786 0 0.786-0.087-0.088-1.748-0.961-1.835-2.708-3.32-3.495-2.839-0.219 0.131-0.437-0.087-0.437-0.568 0-1.442-3.276-4.019-17.868-13.805-9.917-6.64-21.144-12.582-28.658-15.072-5.592-1.878-10.703-2.228-13.98-1.005zM129.048 329.382c0.874 0.656 0.568 1.616-0.481 1.616-0.918 0-3.233-1.267-3.233-1.748 0-0.656 2.752-0.524 3.714 0.131z M73.48 342.444c-2.84 2.752-8.082 7.645-11.708 10.834-6.203 5.505-8.956 8.432-8.388 9 0.393 0.437 2.010-0.656 9.48-6.334 8.912-6.815 14.809-12.538 15.945-15.465 0.568-1.572 0.656-2.228 0.306-2.577-0.393-0.393-1.835 0.786-5.636 4.543z M119.656 354.152c-6.641 0.786-17.343 5.067-15.989 6.422 0.131 0.131 5.112-0.393 11.052-1.18 14.242-1.922 16.732-1.922 23.852-0.043 4.238 1.136 5.679 1.398 6.072 1.005 0.786-0.786-0.83-2.709-3.189-3.888-4.107-2.053-14.504-3.146-21.799-2.315z M173.214 363.413c0.131 0.568 1.529 3.67 3.058 6.902 3.495 7.514 4.936 12.45 5.286 18.13 0.568 10.266-2.796 20.401-12.013 36.128-2.141 3.67-5.155 8.912-6.684 11.664-5.024 9.087-13.237 18.959-19.353 23.241-5.286 3.714-5.636 2.577-0.917-2.884 6.029-6.902 8.256-13.281 8.956-25.338 0.393-7.121 0.655-8.519 1.966-11.096 0.917-1.704 1.048-10.048 0.219-15.115-0.699-4.456-1.879-9.699-2.053-9.13-0.088 0.262 0 4.849 0.219 10.179 0.219 5.286 0.262 10.31 0.131 11.096l-0.306 1.398-0.524-1.529c-0.262-0.83-0.874-3.32-1.398-5.461-0.961-4.281-1.66-6.334-2.184-6.334-0.481 0-0.874 4.063-0.874 9.829-0.043 14.373-2.708 26.212-8.475 38.007-3.538 7.208-5.985 10.572-8.825 12.101-2.447 1.31-7.165 2.272-15.028 2.971-6.684 0.611-9.087 1.18-8.344 1.878 0.874 0.873 15.945 0.656 20.969-0.306 13.542-2.49 21.799-7.601 31.192-19.265 4.805-5.942 10.091-14.111 11.446-17.693 0.612-1.616 1.835-4.106 2.708-5.505 2.053-3.408 2.403-4.063 4.281-8.693 0.917-2.185 2.883-6.596 4.412-9.829 2.359-5.067 2.883-6.64 3.669-11.14 1.355-7.733 2.621-8.475 2.621-1.529 0 6.596-1.31 15.421-3.495 23.154-1.66 6.029-1.966 7.863-1.355 7.863 0.699 0 2.141-3.32 5.024-11.795 4.369-12.712 5.024-17.081 3.538-24.726-1.398-7.383-3.495-11.445-10.572-20.488-5.024-6.422-8.082-9.217-7.296-6.684z M145.43 363.981c0 1.048 2.053 4.893 4.412 8.344 2.446 3.495 4.325 5.505 4.325 4.5 0-0.786-3.8-7.863-5.898-11.053-1.572-2.359-2.839-3.146-2.839-1.791z M129.267 373.942c-1.835 0.611-2.272 1.922-0.786 2.228 0.568 0.131 2.97 0.437 5.329 0.656 5.767 0.568 6.903 1.572 1.31 1.18-4.238-0.306-5.417-0.087-5.417 0.918 0 0.961 2.577 1.791 9.131 2.927 7.121 1.223 8.3 1.704 9.305 3.757 0.874 1.704 2.228 2.053 2.446 0.611 0.131-0.873-1.617-3.451-3.976-5.854-0.568-0.611-2.796-2.010-4.936-3.146-6.247-3.233-9.829-4.194-12.407-3.276z M155.478 378.66c-0.131 2.621 6.772 15.858 10.266 19.615 1.048 1.136 2.621 5.679 2.010 5.679-0.219 0-1.355-1.442-2.577-3.189-2.621-3.714-5.024-6.291-5.243-5.548-0.088 0.262 0.481 1.791 1.267 3.364 1.441 2.839 1.441 2.884 1.704 10.834 0.262 8.519 0.568 9.829 2.228 8.912 0.437-0.219 0.83-0.743 0.83-1.18 0-0.393 0.612-1.616 1.31-2.665 1.748-2.534 2.708-5.985 2.708-9.567 0.043-3.364-1.005-6.029-5.155-13.062-3.669-6.291-9.305-14.198-9.349-13.193z M58.539 382.723c-0.742 0.873-0.437 2.621 0.48 2.796 1.048 0.219 1.572-1.922 0.699-2.796-0.568-0.568-0.699-0.568-1.179 0z M264.475 15.149c-9 2.359-18.785 7.645-21.887 11.882-0.612 0.787-0.874 1.486-0.655 1.573 0.262 0.087 3.276-1.311 6.684-3.146 3.451-1.791 8.038-3.931 10.223-4.806 4.019-1.529 11.839-5.242 12.625-5.985 0.699-0.655-3.714-0.393-6.99 0.48z M236.472 31.968c-0.131 0.349-0.131 0.83 0.043 1.092 0.393 0.611 1.529-0.262 1.529-1.136 0-0.83-1.267-0.787-1.572 0.044z M259.757 73.163c-2.010 1.922-5.329 4.718-7.339 6.204l-3.669 2.709 2.752-0.306c1.486-0.174 2.708-0.174 2.708-0.043s-1.922 1.223-4.238 2.447c-5.243 2.709-6.903 4.019-6.509 5.024s1.966 0.656 6.509-1.355c8.125-3.669 10.921-6.028 11.402-9.611 0.175-1.529 0.743-2.709 1.835-4.106 1.529-1.922 1.878-3.888 0.743-4.237-0.262-0.088-2.14 1.398-4.194 3.276z M388.368 85.876c-0.83 0.524-0.393 4.237 1.048 8.65 0.83 2.578 1.223 4.98 1.529 9.742 0.393 6.684 0.568 7.602 1.66 8.825 1.267 1.486 4.456 0.612 4.456-1.18 0-1.704-1.048-5.198-2.010-6.553-1.223-1.835-1.267-2.578-0.349-5.723 0.656-2.316 0.656-2.403-0.437-4.674-0.611-1.223-1.66-3.626-2.315-5.286-1.267-3.102-2.534-4.456-3.582-3.8z M248.268 90.681c-4.194 1.835-5.985 2.403-11.009 3.364-0.568 0.131-1.267 0.83-1.748 1.791-0.393 0.918-1.398 2.053-2.228 2.534-1.922 1.092-5.941 4.936-5.592 5.286 1.486 1.486 27.828-12.494 27.828-14.766 0-0.874-2.752-0.174-7.252 1.791z M129.485 104.705c-5.592 2.796-19.353 15.377-24.508 22.411-1.092 1.442-2.883 4.413-3.975 6.553-2.447 4.718-5.548 8.956-11.577 15.901-8.213 9.393-8.475 9.742-20.794 27.785-4.937 7.165-7.733 13.936-9.916 23.809-1.179 5.329-2.796 9.043-6.247 14.198-1.179 1.704-2.927 4.805-3.931 6.858-2.316 4.849-9.392 15.508-14.504 21.843-4.5 5.592-12.8 17.824-14.678 21.712-2.097 4.238-1.878 10.353 0.699 20.663 0.699 2.752 1.966 9.436 2.84 14.853 4.631 28.877 4.762 29.575 7.951 37.57 2.49 6.334 7.121 16.033 8.344 17.474 0.48 0.611 1.048 0.961 1.223 0.786 0.524-0.568-0.655-3.8-2.84-7.995-5.898-11.183-9.261-25.993-10.354-45.565l-0.306-5.373 6.029 3.626c8.387 5.067 9.916 6.509 11.358 10.747 1.835 5.505 3.276 6.422 3.276 2.14 0-4.937-4.063-10.179-12.101-15.639-2.752-1.878-5.242-3.976-6.291-5.286-2.402-3.101-4.98-8.606-6.073-13.019-0.961-4.063-1.18-10.485-0.437-13.193 0.655-2.359 3.931-7.077 10.834-15.684 7.864-9.873 10.223-13.499 15.77-24.29 4.675-9.131 6.553-11.927 7.907-11.927 1.136 0 1.355 0.481 1.791 3.976 0.786 6.422 1.398 5.067 2.84-6.247 0.568-4.893 1.486-10.529 1.966-12.538 2.446-10.441 10.703-25.819 19.571-36.478 4.194-5.024 7.121-8.956 10.878-14.548 1.486-2.228 3.276-4.674 3.975-5.461 0.656-0.786 2.447-3.626 3.975-6.247 3.669-6.509 6.597-10.31 13.106-16.994 6.116-6.291 10.397-9.916 14.766-12.451 3.714-2.184 4.805-3.276 4.019-4.194-0.743-0.918-2.49-0.83-4.587 0.219z M230.094 104.924c-3.058 0.656-3.845 1.267-3.845 2.883s0.874 1.66 5.243 0.131c3.888-1.355 5.024-2.053 4.674-3.014-0.35-0.787-2.49-0.83-6.072 0z M222.973 116.457c-3.189 2.534-3.888 3.364-3.495 4.019 0.219 0.306 1.092-0.262 2.49-1.66 1.922-1.835 4.15-4.543 3.757-4.499-0.088 0.043-1.31 0.961-2.752 2.141z M394.135 117.156c-1.18 0.743-1.878 1.486-2.053 2.316-0.611 2.796-3.32 20.488-3.32 21.581 0 1.748 0.656 1.486 2.010-0.743 1.704-2.927 3.233-8.125 3.495-11.97 0.349-4.456 0.437-4.718 1.442-3.495 0.786 0.961 0.83 0.961 1.223 0.131 0.656-1.223 1.092-5.548 0.786-7.339-0.393-1.879-1.048-1.966-3.582-0.481z M410.298 121.567c-0.349 0.961 0.656 1.879 1.18 1.049 0.219-0.35 0.437-0.918 0.437-1.223 0-0.743-1.31-0.656-1.616 0.174z 375.83 132.577c-1.486 0.961-2.14 4.194-2.796 13.193-0.437 6.684-0.219 8.869 1.048 9.087 1.223 0.262 1.835-0.612 4.587-6.16 3.101-6.291 3.408-7.383 2.447-8.169s-2.14 0.393-3.976 4.019c-0.83 1.66-1.616 2.97-1.748 2.97-0.175 0-0.175-1.136-0.087-2.534 0.131-1.704 0.743-3.714 2.010-6.465 1.005-2.184 1.835-4.194 1.835-4.456 0-1.267-2.185-2.272-3.32-1.486z M204.057 144.547c-0.612 0.612-0.699 2.097-0.174 2.097s1.835-1.486 1.835-2.097c0-0.699-1.005-0.655-1.66 0z M197.766 155.948c-1.879 2.97-4.281 8.256-4.281 9.436 0 1.048 0 1.048 0.917 0.219 1.355-1.223 5.198-9.393 5.198-11.096 0-0.917-0.699-0.35-1.835 1.441z M191.388 172.506c-0.612 0.612-0.699 3.845-0.088 3.845s1.529-3.451 1.048-3.931c-0.306-0.306-0.612-0.262-0.961 0.088z M247.655 175.040c-1.092 0.699 1.005 6.684 3.014 8.475 0.524 0.481 1.048 0.699 1.223 0.524 0.481-0.437-0.699-5.548-1.704-7.339s-1.66-2.185-2.534-1.66z M186.976 186.616c-1.136 3.583-2.010 10.222-1.486 10.747 0.262 0.262 0.786-1.179 1.398-3.8 1.005-4.412 1.66-9.786 1.223-9.786-0.131 0-0.655 1.267-1.136 2.839z M185.752 210.425c0 1.572 0.088 2.185 0.174 1.398 0.088-0.743 0.088-2.053 0-2.839-0.088-0.743-0.174-0.131-0.174 1.441z M281.469 208.285c-0.568 0.917 0.131 1.136 9.436 2.97 2.272 0.437 6.466 1.704 9.262 2.839 4.849 1.879 6.858 2.359 7.471 1.748 1.529-1.529-7.296-5.286-17.344-7.339-3.844-0.83-8.387-0.917-8.825-0.219z M269.193 212.478c-1.048 0.393-0.568 1.486 0.918 2.097 0.786 0.35 2.971 0.786 4.805 1.048 7.034 0.874 8.038-1.529 1.223-2.97-2.359-0.481-5.985-0.612-6.946-0.174z M174.656 215.755c-1.048 1.267-3.407 3.931-5.286 5.854-3.276 3.407-4.15 4.98-2.752 4.98 1.617 0 9.611-8.912 10.441-11.664 0.568-1.791-0.568-1.441-2.403 0.83z M180.816 226.458c0 3.451 2.228 12.363 3.058 12.363 0.262 0 0.437-0.655 0.393-1.441-0.043-2.403-2.315-11.795-2.883-12.013-0.393-0.088-0.568 0.262-0.568 1.092z M197.024 235.37c-4.5 0.874-3.145 2.272 1.966 2.010 3.583-0.131 6.203-1.136 5.636-2.053-0.306-0.524-4.936-0.481-7.601 0.043z M186.495 243.757c0 2.621 0.655 3.32 3.714 3.8 5.81 0.961 13.149 0.306 17.168-1.529 4.587-2.097 2.403-2.403-7.339-1.092-5.505 0.743-8.65 0.131-11.751-2.228-1.529-1.223-1.791-1.048-1.791 1.048z M484.084 245.243c-2.010 1.31-2.402 2.141-0.83 1.617 1.442-0.437 3.408-1.922 3.146-2.403-0.349-0.524-0.219-0.568-2.315 0.786z M165.657 246.685c-3.014 1.835-6.16 5.941-5.243 6.858 1.048 1.048 9.043-5.548 8.475-6.99-0.35-0.961-1.529-0.917-3.233 0.131z M492.734 247.121c-0.262 0.481-0.437 2.097-0.349 3.626l0.131 2.708 0.786-1.704c0.786-1.791 1.005-5.505 0.306-5.505-0.219 0-0.611 0.393-0.873 0.874z M399.29 251.446c-0.481 0.83-0.087 3.976 1.704 14.023 0.481 2.752 1.092 7.252 1.267 9.961 0.349 4.543 0.873 6.378 1.616 5.635 0.393-0.393 0.262-5.505-0.262-9.654-0.219-1.966-0.611-7.077-0.873-11.445-0.219-4.325-0.524-8.213-0.699-8.606-0.349-1.005-2.228-0.917-2.752 0.088z M477.007 253.456c-0.611 0.743-0.219 1.529 0.83 1.529 0.961 0 1.966-1.092 1.572-1.748s-1.791-0.524-2.402 0.219z M390.683 263.285c0.656 15.596 0.786 35.473 0.306 41.502-1.005 12.363-1.048 14.286-0.524 14.591 0.786 0.481 1.704-2.272 2.228-6.596 1.18-10.223-0.175-52.161-1.748-54.651-0.349-0.524-0.393 0.961-0.262 5.155z M61.553 260.97c0 0.219 0.393 0.83 0.873 1.442 1.223 1.572 1.092 1.748-1.092 1.442-2.578-0.349-2.621 0.481-0.218 2.665 2.49 2.272 5.417 3.626 6.247 2.927 0.35-0.262 0.568-0.918 0.437-1.354-0.306-1.136-0.088-1.092 2.403 0.219 1.922 1.048 5.329 1.486 5.329 0.743 0-0.175-1.092-0.873-2.447-1.529s-4.325-2.49-6.597-4.019c-3.931-2.709-4.937-3.233-4.937-2.534z M477.531 267.042c-1.442 1.005-1.18 1.616 0.349 0.83 0.743-0.393 1.223-0.873 1.092-1.092-0.349-0.568-0.306-0.568-1.442 0.262z M466.697 269.008c-2.053 0.481-3.67 1.878-2.927 2.621 0.306 0.306 1.442 0.043 3.8-0.918 4.413-1.835 3.932-2.752-0.873-1.704z M469.231 285.784c-2.665 0.656-4.63 1.791-4.194 2.49s7.034 0.131 9.262-0.743c1.267-0.524 1.835-1.005 1.835-1.572 0-0.699-0.306-0.83-2.272-0.786-1.267 0.043-3.364 0.306-4.63 0.611z M510.471 290.195c-5.592 0.743-6.815 1.005-6.815 1.572 0 0.524 24.727 0.262 25.906-0.262 3.801-1.791-9.13-2.665-19.091-1.31z M403.921 291.419c-0.611 1.529-0.918 7.121-0.349 7.426 0.262 0.175 0.611 0.043 0.743-0.306 0.349-0.961 0-8.082-0.393-7.121z M531.615 297.36c-1.092 0.175-1.879 0.349-1.747 0.393 1.267 0.349 8.038 1.354 9.436 1.354 1.922 0 4.543-0.743 4.543-1.31 0-0.175-0.306-0.481-0.699-0.611-0.874-0.349-9-0.219-11.533 0.175z M58.758 299.894c-0.48 0.786 3.714 1.922 8.125 2.14 6.247 0.349 9.218-0.481 6.159-1.66-1.704-0.656-13.892-1.092-14.285-0.481z M490.332 300.68c-1.878 0.481-3.233 1.18-3.014 1.529 0.306 0.524 10.091 0.481 10.441 0 0.131-0.262-0.131-0.656-0.611-0.918-1.005-0.524-5.505-0.918-6.815-0.611z M509.64 300.724c-0.656 0.611-0.306 1.878 0.524 1.878 1.136 0 1.572-0.743 0.918-1.529-0.611-0.699-1.005-0.83-1.442-0.349z M539.478 303.476c0 0.219 0.393 0.437 0.83 0.437 0.481 0 1.005-0.219 1.136-0.437 0.174-0.262-0.218-0.437-0.83-0.437s-1.136 0.175-1.136 0.437z M546.468 304.35c-0.481 0.306-0.131 0.437 1.311 0.437s1.791-0.131 1.311-0.437c-0.35-0.219-0.961-0.437-1.311-0.437s-0.961 0.219-1.311 0.437z M485.438 307.714c-0.568 0.087-1.005 0.393-1.005 0.656 0 0.611 13.499 0.131 14.154-0.524 0.437-0.437-10.921-0.568-13.149-0.131z M545.594 308.587c-1.879 0.219-3.932 0.961-3.932 1.486 0 0.656 8.038 0.481 8.956-0.219 0.787-0.568 0.787-0.611-0.043-0.83-1.529-0.437-3.451-0.611-4.98-0.437z M38.837 312.606c0 2.228 0.218 4.413 0.437 4.893 0.568 1.005 2.010 1.092 2.359 0.131 0.83-2.185-0.349-6.99-2.053-8.431-0.699-0.524-0.742-0.262-0.742 3.408z M509.51 312.651c-1.791 0.699-1.704 1.398 0.087 1.223 1.136-0.087 1.704-0.349 1.704-0.743 0-0.786-0.611-0.961-1.791-0.481z M488.365 313.567c-1.572 0.262-3.014 0.611-3.189 0.786-0.611 0.611 7.077 0.961 10.529 0.524 3.276-0.437 3.976-0.656 3.408-1.267-0.524-0.481-7.558-0.524-10.747-0.043z M493.827 319.509c-5.985 0.481-10.179 1.136-11.009 1.704-2.053 1.31-0.918 2.010 2.315 1.442 1.18-0.219 6.116-0.786 10.965-1.267 8.956-0.873 10.179-1.092 10.179-1.791 0-0.349-8.432-0.437-12.45-0.087z M549.264 322.786c-0.787 1.267 4.587 2.577 6.946 1.704 1.442-0.568 1.529-1.572 0.218-1.966-1.747-0.437-6.815-0.306-7.164 0.262z M507.893 325.8c-1.835 0.306-2.272 0.568-1.835 1.223 0.524 0.873 5.897 0.219 6.553-0.786 0.306-0.524-2.665-0.786-4.718-0.437z M484.784 326.935c-2.359 0.611 1.486 1.878 5.635 1.878 2.534 0 5.635-0.568 6.159-1.092 0.699-0.699-1.442-1.092-6.029-1.048-2.752 0.043-5.373 0.131-5.767 0.262z M545.332 330.518c0.35 0.524 8.3 1.486 11.183 1.267 2.621-0.131 3.189-0.83 1.092-1.267-2.053-0.437-12.538-0.437-12.276 0z M476.614 332.702c-1.354 0.349-2.185 1.092-2.228 1.878 0 0.743 2.665 0.918 7.339 0.481 5.067-0.481 6.422-0.961 5.417-1.966-0.656-0.656-8.344-0.918-10.529-0.393z M498.763 332.615c-0.961 0.262-1.005 1.267-0.087 1.616 1.791 0.699 6.291-0.349 6.291-1.442 0-0.481-4.63-0.611-6.204-0.175z M515.014 332.746c-0.481 0.306-0.087 0.437 1.442 0.437 1.311 0 2.010-0.175 1.835-0.437-0.35-0.568-2.403-0.568-3.277 0z M535.24 337.857c-0.787 0.306-0.699 1.31 0.131 1.616 0.393 0.131 3.845 0.262 7.732 0.219 10.004-0.043 11.927-0.786 4.674-1.66-3.757-0.481-11.577-0.611-12.538-0.175z M475.26 338.818c-5.155 0.262-6.772 0.699-5.635 1.398 0.699 0.437 19.091 0.437 25.294 0l4.15-0.262-2.185-0.524c-2.752-0.656-14.94-1.005-21.625-0.611z M509.553 339.736c0.349 0.568 2.84 0.568 3.713 0 0.481-0.306 0-0.437-1.66-0.437-1.442 0-2.228 0.175-2.053 0.437z M497.234 344.104c-1.18 0.481-1.31 1.092-0.306 1.486 1.136 0.437 5.243 0.306 6.596-0.219 1.18-0.437 1.18-0.481 0.393-1.092-0.961-0.699-5.155-0.786-6.684-0.175z M538.386 347.599c-0.174 0.262 0.35 0.437 1.267 0.437 0.874 0 1.572-0.219 1.572-0.437 0-0.262-0.568-0.437-1.267-0.437-0.742 0-1.442 0.175-1.572 0.437z M511.082 348.909c0 0.219 0.481 0.437 1.092 0.437s1.092-0.219 1.092-0.437c0-0.262-0.481-0.437-1.092-0.437s-1.092 0.175-1.092 0.437z  M529.125 354.676c-1.791 0.873-1.048 1.223 2.403 1.223 3.932 0 5.33-0.306 5.33-1.136 0-0.743-6.247-0.83-7.732-0.087z M501.471 355.507c-2.927 0.437-5.723 1.354-5.81 1.922-0.131 0.743 5.373 0.743 9.043 0 3.714-0.743 5.067-1.31 5.067-1.966 0-0.524-4.849-0.481-8.3 0.043z M517.33 359.875c-2.971 0.873-1.005 1.922 3.713 1.878 2.971 0 4.237-0.656 2.84-1.398-1.311-0.699-4.98-0.961-6.553-0.481z M528.033 359.918c-1.572 0.568-1.572 1.529 0 1.878 2.49 0.524 4.98-1.486 2.621-2.14-1.179-0.306-1.136-0.306-2.621 0.262z M492.822 362.889c-1.966 0.481-2.14 0.786-0.743 1.136s4.238-0.262 4.194-0.918c-0.043-0.568-1.616-0.656-3.451-0.219z M480.109 363.283c-0.83 0.524 3.014 1.048 5.417 0.656 1.092-0.131 1.835-0.437 1.704-0.656-0.306-0.481-6.334-0.481-7.121 0z M507.631 366.821c-2.228 0.262-3.932 0.656-4.325 1.048-0.611 0.568-0.043 0.611 4.762 0.393 3.451-0.131 8.125 0.043 12.975 0.481 9.567 0.873 10.572 0.873 10.572 0 0-0.349-0.742-0.961-1.616-1.354-1.966-0.83-16.251-1.18-22.367-0.568z M509.116 380.975c-1.31 0.961-0.262 1.18 4.63 1.048l4.106-0.131-2.271-0.524c-4.281-1.048-5.548-1.092-6.466-0.393z M500.029 393.339c-0.175 0.262 0.175 0.611 0.786 0.743 2.272 0.568 10.135 1.18 11.577 0.873l1.529-0.306-1.966-0.611c-2.577-0.786-11.577-1.31-11.926-0.699z M486.313 406.094c-7.514 0.743-0.743 2.315 12.32 2.927 5.417 0.219 6.815 0.175 8.213-0.393 1.748-0.743 2.053-1.398 0.83-1.791-0.743-0.262-16.731-1.18-17.998-1.048-0.349 0-1.878 0.175-3.364 0.306z M484.652 416.579c-3.058 0.656-0.306 2.49 2.927 1.966 1.704-0.262 2.447-0.873 1.835-1.486-0.611-0.524-3.276-0.786-4.762-0.481z M39.142 443.796c-1.267 1.267-1.529 2.097-0.611 2.097s2.141-1.572 1.966-2.49c-0.131-0.699-0.306-0.656-1.355 0.393z M480.065 453.538c0 0.961 1.66 1.704 2.447 1.048 0.481-0.393 0.524-0.656 0.131-1.092-0.656-0.83-2.577-0.786-2.577 0.043z M41.239 454.368c-2.402 1.136-5.417 3.495-4.98 3.932 0.656 0.699 7.82-3.276 7.82-4.368 0-0.83-0.306-0.786-2.84 0.437z M425.108 455.111c-5.81 1.136-2.621 1.791 10.791 2.185 12.669 0.349 14.897 0.611 19.964 2.359 3.8 1.31 5.111 1.398 4.893 0.349-0.349-1.878-6.815-4.194-13.543-4.937-4.98-0.524-19.397-0.524-22.105 0.043z M397.498 466.862c-1.529 0.961 7.383 3.146 15.202 3.757 4.063 0.306 4.63 0.131 3.276-1.005-1.748-1.398-4.019-1.922-10.529-2.534-8.125-0.743-7.164-0.743-7.951-0.219z M383.956 471.099c-1.704 0.306-2.010 0.918-0.699 1.442 1.486 0.524 8.125 0.568 8.125 0.043 0-0.83-5.199-1.835-7.426-1.486z"],
  "ft-apart": [512, 512, [], "e946", "M102.159 102.159q21.634 0 36.658-15.023t15.024-36.657q0-20.432-15.024-35.456t-36.657-15.024-36.657 15.024-15.023 35.456q0 21.634 15.023 36.657t36.657 15.023zM204.319 189.897q0-15.625-8.413-28.244t-22.835-18.629q-15.625-7.212-33.653-11.418t-37.258-4.207-37.258 4.207-33.653 11.418q-14.422 6.010-22.835 18.629t-8.413 28.244v14.423h204.319v-14.423zM409.84 102.159q21.634 0 36.657-15.023t15.024-36.657q0-20.432-15.024-35.456t-36.658-15.024-36.658 15.024-15.024 35.456q0 21.634 15.024 36.657t36.658 15.023zM512 189.897q0-15.625-8.413-28.244t-22.836-18.629q-15.625-7.212-33.653-11.418t-37.258-4.207-37.258 4.207-33.653 11.418q-14.423 6.010-22.836 18.629t-8.413 28.244v14.423h204.319v-14.423zM435.079 384.601v-51.681h-358.159v51.681l-76.92-76.92 76.92-76.92v51.681l358.159-1.202v-50.479l76.92 76.92zM204.319 435.080v-25.24h-63.7q-4.808 0-9.014 3.606t-4.207 9.615v76.92q0 4.808 4.207 8.413t9.014 3.606h51.681q4.808 0 8.413-3.606t3.606-8.413v-38.46q0-6.010-3.606-9.615t-8.413-3.606h-38.46v-13.221h50.479zM179.079 473.54v13.221h-25.239v-13.221h25.239zM396.619 435.080h-25.24v76.92h-25.24v-76.92h-26.442v-25.24h76.92v25.24zM269.22 435.080v13.221h25.24v25.24h-25.24v38.46h-26.441v-102.159h64.902v25.24h-38.46z"],
  "abacus": [512, 512, [], "e947", "M48 464v-400h400v400h-400zM416 96h-336v96h32.272c2.384-17.92 11.936-31.344 23.392-31.344 11.472 0 21.024 13.424 23.392 31.344h17.136c2.304-18.096 11.92-31.664 23.456-31.664s21.152 13.584 23.456 31.664h113.072c2.304-18.096 11.92-31.664 23.456-31.664 11.552 0 21.152 13.584 23.472 31.664h32.896v-96zM416 208h-32.8c-2.144 18.416-11.856 32.336-23.552 32.336-11.664 0-21.376-13.904-23.536-32.336h-112.912c-2.144 18.416-11.856 32.336-23.536 32.336s-21.392-13.92-23.536-32.336h-16.912c-2.064 18.576-11.808 32.656-23.552 32.656s-21.488-14.080-23.552-32.656h-32.112v112h127.872c2.304-18.096 11.936-31.664 23.456-31.664 11.536 0 21.168 13.584 23.472 31.664h15.984c2.064-18.576 11.808-32.672 23.568-32.672 11.728 0 21.472 14.096 23.552 32.672h17.92c2.224-18.272 11.904-32 23.52-32s21.296 13.728 23.52 32h33.136v-112zM416 336h-33.152c-2.224 18.256-11.904 32-23.52 32s-21.296-13.744-23.52-32h-18.080c-2.384 17.904-11.936 31.328-23.392 31.328-11.472 0-21.024-13.424-23.408-31.328h-16.064c-2.144 18.416-11.856 32.336-23.536 32.336-11.664 0-21.376-13.904-23.536-32.336h-127.792v96h336v-96z"],
"ac-unit": [512, 512, [], "e948", "M512 230.761v50.479h-106.967l82.93 82.93-36.056 37.258-118.986-120.188h-51.681v51.681l120.188 118.986-37.258 36.056-82.93-82.93v106.967h-50.479v-106.967l-82.93 82.93-37.258-36.057 120.188-118.986v-51.681h-51.681l-118.986 120.188-36.056-37.258 82.93-82.93h-106.967v-50.479h106.967l-82.93-82.93 36.056-37.258 118.986 120.188h51.681v-51.681l-120.188-118.986 37.258-36.056 82.93 82.93v-106.967h50.479v106.967l82.93-82.93 37.258 36.056-120.188 118.986v51.681h51.681l118.986-120.188 36.057 37.258-82.93 82.93h106.967z"],
"access-alarms": [512, 512, [], "e949", "M256 462.106q73.652 0 125.327-52.269t51.675-125.921-51.675-125.327-125.327-51.675-125.327 51.675-51.675 125.327 51.675 125.921 125.327 52.269zM256 55.833q95.035 0 161.559 66.525t66.524 161.559-66.524 161.559-161.559 66.524-161.559-66.524-66.525-161.559 66.525-161.559 161.559-66.525zM269.067 157.995v134.236l100.975 60.584-20.195 30.887-118.793-73.652v-152.055h38.014zM152.649 41.578l-117.606 96.223-32.074-38.014 116.418-96.222zM509.030 99.787l-32.074 38.014-117.606-99.787 33.262-38.014z"],
"access-time": [512, 512, [], "e950", "M269.221 127.399v134.611l115.38 68.507-19.23 32.45-134.611-81.728v-153.84h38.46zM256 461.521q84.132 0 144.827-60.695t60.695-144.827-60.695-144.827-144.827-60.695-144.827 60.695-60.695 144.827 60.695 144.827 144.827 60.695zM256 0q105.765 0 180.882 75.118t75.118 180.882-75.118 180.882-180.882 75.118-180.882-75.118-75.118-180.882 75.118-180.882 180.882-75.118z"],
"accessibility": [512, 512, [], "e951", "M486.76 179.080h-153.841v332.92h-51.681v-153.841h-50.479v153.841h-51.681v-332.92h-153.84v-51.681h461.521v51.681zM256 0q20.432 0 36.057 15.024t15.625 35.456-15.625 36.056-36.057 15.624-36.056-15.624-15.625-36.056 15.625-35.456 36.056-15.024z"],
"accessibility1": [512, 512, [], "e952", "M208 48c0-26.509 21.49-48 48-48s48 21.491 48 48c0 26.51-21.49 48-48 48s-48-21.49-48-48z M320 160l164.798-71.086-11.885-29.712-200.913 68.798h-32l-200.913-68.798-11.885 29.712 164.798 71.086v128l-65.635 212.285 29.92 11.35 92.858-207.635h13.714l92.858 207.635 29.92-11.35-65.635-212.285z"],
"accessibility-new": [512, 512, [], "e953", "M256 102.159q-20.432 0-36.056-15.624t-15.625-36.056 15.625-35.456 36.056-15.024 36.057 15.024 15.625 35.456-15.625 36.056-36.057 15.624zM473.541 102.159l13.221 51.681q-60.094 16.827-153.84 25.239v332.92h-51.681v-153.841h-50.479v153.841h-51.681v-332.92q-93.746-8.413-153.84-25.239l13.221-51.681q93.747 25.24 217.54 25.24t217.54-25.239z"],
"accessible": [512, 512, [], "e954", "M277.634 409.841h52.882q-8.413 42.065-45.671 72.113t-80.526 30.047q-52.882 0-90.141-37.258t-37.258-90.141q0-43.267 30.047-80.526t72.112-45.671v52.882q-22.835 8.413-37.258 28.244t-14.422 45.070q0 31.249 22.836 54.084t54.084 22.836q25.239 0 45.071-14.423t28.244-37.258zM204.319 181.483q0-28.845 25.239-45.672t51.681-1.202h1.202v1.202q8.413 3.606 15.625 10.817l33.652 37.258q43.267 46.873 103.361 46.873v50.479q-67.305 0-127.399-49.277v87.737h76.92q20.432 0 35.455 15.625t15.024 36.057v140.62h-50.479v-127.399h-128.601q-20.432 0-36.056-15.625t-15.625-36.057v-151.436zM204.319 50.479q0-21.634 15.024-36.056t36.657-14.422 36.658 14.422 15.024 36.056-15.024 36.657-36.658 15.023-36.657-15.023-15.024-36.657z"],
"accessible-icon": [448, 512, [], "e955", "M423.9 255.8l-12.9 157.3c-3.3 40.7-63.9 35.1-60.6-4.9l10-122.5-41.1 2.3c10.1 20.7 15.8 43.9 15.8 68.5 0 41.2-16.1 78.7-42.3 106.5l-39.3-39.3c57.9-63.7 13.1-167.2-74-167.2-25.9 0-49.5 9.9-67.2 26l-39.3-39.3c22-20.7 50.1-35.1 81.4-40.2l75.3-85.7-42.6-24.8-51.6 46c-30 26.8-70.6-18.5-40.5-45.4l68-60.7c9.8-8.8 24.1-10.2 35.5-3.6 0 0 139.3 80.9 139.5 81.1 16.2 10.1 20.7 36 6.1 52.6l-58.4 66.5 106.1-5.9c18.5-1.1 33.6 14.4 32.1 32.7zM359 101.8c28.1 0 50.9-22.8 50.9-50.9s-22.8-50.9-50.9-50.9c-28.1 0-50.9 22.8-50.9 50.9s22.8 50.9 50.9 50.9zM179.6 456.5c-80.6 0-127.4-90.6-82.7-156.1l-39.7-39.7c-20.8 26.3-33.2 59.6-33.2 95.7 0 130.7 150.7 201.4 251.4 122.5l-39.7-39.7c-16 10.9-35.3 17.3-56.1 17.3z"],
"accessible-forward": [512, 512, [], "e956", "M401.58 288.692q20.974 0 36.395 16.038t15.421 37.012v144.347h-51.817v-132.010h-132.010q-28.376 0-44.415-25.291t-3.701-51.2l48.115-107.335h-57.986l-17.273 40.714-50.583-14.805 17.273-46.882q13.571-32.077 49.35-32.077h136.945q29.61 0 45.648 24.674t3.701 50.583l-44.414 96.231h49.349zM322.622 381.223q0 54.284-38.863 92.53t-93.147 38.246-93.147-38.246-38.862-92.53 38.862-93.147 93.147-38.863v53.050q-32.077 0-55.518 23.441t-23.441 55.518 23.441 55.518 55.518 23.441 55.518-23.441 23.441-55.518h53.050zM348.53 53.049q0-22.207 15.421-37.629t37.629-15.421 37.012 15.421 14.805 37.629-14.805 37.629-37.012 15.421-37.629-15.421-15.421-37.629z"],
"account-balance": [512, 512, [], "e957", "M255.429 0l232 122.285v49.143h-462.857v-49.143zM365.143 219.429h73.143v171.429h-73.143v-171.429zM24.572 512v-73.143h462.857v73.143h-462.857zM218.857 219.429h73.143v171.429h-73.143v-171.429zM72.572 219.429h73.143v171.429h-73.143v-171.429z"],
"account-balance-wallet": [512, 512, [], "e958", "M363.457 296.454q16.435 0 28.445-11.378t12.010-29.077-12.010-29.077-28.445-11.378-28.445 11.378-12.010 29.077 12.010 29.077 28.445 11.378zM256 363.457v-214.913h269.274v214.913h-269.274zM498.726 417.817v26.548q0 21.491-16.435 37.926t-37.926 16.435h-376.731q-22.755 0-38.558-15.803t-15.803-38.558v-376.731q0-22.755 15.803-38.558t38.558-15.803h376.731q21.491 0 37.926 16.434t16.435 37.926v26.548h-242.726q-22.756 0-38.558 15.802t-15.803 38.558v214.913q0 22.755 15.803 38.558t38.558 15.803h242.726z"],
"account-box": [512, 512, [], "e959", "M85.334 398.666v28h341.334v-28q0-38.666-58.666-63.334t-112-24.666-112 24.666-58.666 63.334zM341.334 170.667q0-34.667-25.334-60t-60-25.334-60 25.334-25.334 60 25.334 60 60 25.333 60-25.334 25.334-60zM0 57.334q0-24 16.666-40.666t40.666-16.666h397.334q22.666 0 40 17.334t17.333 40v397.334q0 22.666-17.334 40t-40 17.333h-397.334q-24 0-40.666-16.666t-16.666-40.666v-397.334z"],
"account-circle": [512, 512, [], "e960", "M256 441.089q40.864 0 85.935-24.038t67.906-58.892q-1.202-33.653-54.084-56.488t-99.756-22.836-99.756 22.235-54.084 57.089q22.835 34.855 67.906 58.892t85.934 24.038zM256 76.92q-31.249 0-54.084 22.835t-22.835 54.085 22.835 54.084 54.084 22.835 54.084-22.835 22.836-54.084-22.836-54.084-54.084-22.835zM256 0q105.765 0 180.882 75.118t75.118 180.882-75.118 180.882-180.882 75.118-180.882-75.118-75.118-180.882 75.118-180.882 180.882-75.118z"],
"account-tree": [512, 512, [], "e961", "M512 230.761h-179.080v-76.92h-51.681v204.319h51.681v-76.92h179.080v205.521h-179.080v-76.92h-102.159v-256h-51.681v76.92h-179.080v-205.521h179.080v76.92h153.84v-76.92h179.080v205.521z"],
"accusoft": [640, 512, [], "e962", "M322.1 252v-1l-51.2-65.8s-12 1.6-25 15.1c-9 9.3-242.1 239.1-243.4 240.9-7 10 1.6 6.8 15.7 1.7 0.8 0 114.5-36.6 114.5-36.6 0.5-0.6-0.1-0.1 0.6-0.6-0.4-5.1-0.8-26.2-1-27.7-0.6-5.2 2.2-6.9 7-8.9l92.6-33.8c0.6-0.8 88.5-81.7 90.2-83.3zM482.2 372.1c13.3 16.1 20.7 13.3 30.8 9.3 3.2-1.2 115.4-47.6 117.8-48.9 8-4.3-1.7-16.7-7.2-23.4-2.1-2.5-205.1-245.6-207.2-248.3-9.7-12.2-14.3-12.9-38.4-12.8-10.2 0-106.8 0.5-116.5 0.6-19.2 0.1-32.9-0.3-19.2 16.9 7.7 9.5 234.2 299.7 239.9 306.6zM634.9 373.7c-2.3-0.3-24.6-4.7-38-7.2 0 0-115 50.4-117.5 51.6-16 7.3-26.9-3.2-36.7-14.6l-57.1-74c-5.4-0.9-60.4-9.6-65.3-9.3-3.1 0.2-9.6 0.8-14.4 2.9-4.9 2.1-145.2 52.8-150.2 54.7-5.1 2-11.4 3.6-11.1 7.6 0.2 2.5 2 2.6 4.6 3.5 2.7 0.8 300.9 67.6 308 69.1 15.6 3.3 38.5 10.5 53.6 1.7 2.1-1.2 123.8-76.4 125.8-77.8 5.4-4 4.3-6.8-1.7-8.2z"],
"activity": [512, 512, [], "e963", "M469.334 234.667h-85.334c-9.365 0-17.322 6.037-20.245 14.592l-43.755 131.286-107.755-323.286c-3.733-11.178-15.808-17.216-26.987-13.504-6.613 2.197-11.413 7.318-13.504 13.504l-59.136 177.408h-69.952c-11.776 0-21.334 9.558-21.334 21.333s9.557 21.334 21.334 21.334h85.333c9.024-0.064 17.28-5.696 20.245-14.592l43.755-131.286 107.755 323.286c2.091 6.187 6.89 11.286 13.483 13.483 11.178 3.733 23.253-2.325 26.986-13.483l59.157-177.408h69.952c11.776 0 21.334-9.558 21.334-21.334s-9.558-21.334-21.334-21.334z"],
"ad": [512, 512, [], "e964", "M157.52 272h36.96l-18.48-53.22-18.48 53.22zM352 256c-13.23 0-24 10.77-24 24s10.77 24 24 24 24-10.77 24-24-10.77-24-24-24zM464 64h-416c-26.5 0-48 21.5-48 48v288c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48v-288c0-26.5-21.5-48-48-48zM250.58 352h-16.94c-6.81 0-12.88-4.32-15.12-10.75l-7.37-21.25h-70.29l-7.38 21.25c-2.239 6.312-8.159 10.75-15.114 10.75-0.002 0-0.004 0-0.006 0h-16.939c-11.010 0-18.73-10.85-15.12-21.25l53.7-154.63c3.358-9.464 12.235-16.12 22.666-16.12 0.001 0 0.003 0 0.005 0h26.66c0.001 0 0.002 0 0.004 0 10.434 0 19.312 6.661 22.614 15.962l0.052 0.168 53.69 154.62c3.61 10.4-4.11 21.25-15.11 21.25zM424 336c0 8.84-7.16 16-16 16h-16c-4.85 0-9.040-2.27-11.98-5.68-8.62 3.66-18.090 5.68-28.020 5.68-39.7 0-72-32.3-72-72s32.3-72 72-72c8.46 0 16.46 1.73 24 4.42v-36.42c0-8.84 7.16-16 16-16h16c8.84 0 16 7.16 16 16v160z"],
"ad-units": [512, 512, [], "e965", "M372.562 0h-233.124q-18.519 0-32.136 13.617t-13.617 33.225v418.315q0 19.608 13.617 33.226t32.136 13.617h233.124q18.519 0 32.136-13.617t13.617-33.226v-418.315q0-19.608-13.617-33.225t-32.136-13.617zM372.562 418.315h-233.124v-324.63h233.124v324.63zM163.405 116.561h185.191v46.843h-185.191v-46.843z"],
"adb": [512, 512, [], "e966", "M327.235 179.2q10.017 0 16.695-6.678t6.678-16.696-6.678-17.252-16.695-7.235-16.695 7.235-6.678 17.252 6.678 16.696 16.695 6.678zM184.765 179.2q10.018 0 16.696-6.678t6.679-16.696-6.678-17.252-16.696-7.235-16.696 7.235-6.678 17.252 6.678 16.696 16.696 6.678zM353.948 69.009q67.895 50.087 67.895 133.565v24.487h-331.687v-24.487q0-83.478 67.895-133.565l-50.087-50.087 20.035-18.922 54.539 54.539q35.618-17.809 73.461-17.809t73.461 17.808l54.539-54.539 20.035 18.922zM90.156 345.043v-94.608h331.687v94.608q0 69.009-48.418 117.983t-117.426 48.974-117.426-48.974-48.417-117.983z"],
"add": [512, 512, [], "e967", "M512 292.080h-219.919v219.92h-72.161v-219.919h-219.919v-72.161h219.919v-219.919h72.161v219.919h219.919v72.161z"],
"add-solid": [512, 512, [], "e968", "M281.6 230.4v-102.4h-51.2v102.4h-102.4v51.2h102.4v102.4h51.2v-102.4h102.4v-51.2h-102.4zM256 512c-141.385 0-256-114.615-256-256s114.615-256 256-256v0c141.385 0 256 114.615 256 256s-114.615 256-256 256v0z"],






  };

  bunker(function () {
    defineIcons('mh', icons);
  });

}());

(function () {
  'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var noop = function noop() {};

  var _WINDOW = {};
  var _DOCUMENT = {};
  var _MUTATION_OBSERVER = null;
  var _PERFORMANCE = {
    mark: noop,
    measure: noop
  };

  try {
    if (typeof window !== 'undefined') _WINDOW = window;
    if (typeof document !== 'undefined') _DOCUMENT = document;
    if (typeof MutationObserver !== 'undefined') _MUTATION_OBSERVER = MutationObserver;
    if (typeof performance !== 'undefined') _PERFORMANCE = performance;
  } catch (e) {}

  var _ref = _WINDOW.navigator || {},
    _ref$userAgent = _ref.userAgent,
    userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;

  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var MUTATION_OBSERVER = _MUTATION_OBSERVER;
  var PERFORMANCE = _PERFORMANCE;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
  var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

  var NAMESPACE_IDENTIFIER = '___MH_STYLE_ICON___';
  var UNITS_IN_GRID = 16;
  var DEFAULT_FAMILY_PREFIX = 'mhi';
  var DEFAULT_REPLACEMENT_CLASS = 'mh';
  var DATA_FA_I2SVG = 'data-mh-i2svg';
  var DATA_FA_PSEUDO_ELEMENT = 'data-mh-pseudo-element';
  var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-mh-pseudo-element-pending';
  var DATA_PREFIX = 'data-prefix';
  var DATA_ICON = 'data-icon';
  var HTML_CLASS_I2SVG_BASE_CLASS = 'mhstyleicon-i2svg';
  var MUTATION_APPROACH_ASYNC = 'async';
  var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ['HTML', 'HEAD', 'STYLE', 'SCRIPT'];
  var PRODUCTION = function () {
    try {
      return "production" === 'production';
    } catch (e) {
      return false;
    }
  }();
  var PREFIX_TO_STYLE = {
    'mh': 'mhstyle',
    'mhi': 'mhstyle'
  };
  var STYLE_TO_PREFIX = {
    'mhstyle': 'mh'
  };
  var LAYERS_TEXT_CLASSNAME = 'mh-layers-text';
  var FONT_FAMILY_PATTERN = /MH-Style Icon ([5 ]*)(mhstyle).*/; // TODO: do we need to handle font-weight for kit SVG pseudo-elements?

  var FONT_WEIGHT_TO_PREFIX = {
    '900': 'mh',
  };
  var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
  var ATTRIBUTES_WATCHED_FOR_MUTATION = ['class', 'data-prefix', 'data-icon', 'data-mh-transform', 'data-mh-mask'];
  var DUOTONE_CLASSES = {
    GROUP: 'group',
    SWAP_OPACITY: 'swap-opacity',
    PRIMARY: 'primary',
    SECONDARY: 'secondary'
  };
  var RESERVED_CLASSES = ['xs', 'sm', 'lg', 'fw', 'ul', 'li', 'border', 'pull-left', 'pull-right', 'spin', 'pulse', 'rotate-90', 'rotate-180', 'rotate-270', 'flip-horizontal', 'flip-vertical', 'flip-both', 'stack', 'stack-1x', 'stack-2x', 'inverse', 'layers', 'layers-text', 'layers-counter', DUOTONE_CLASSES.GROUP, DUOTONE_CLASSES.SWAP_OPACITY, DUOTONE_CLASSES.PRIMARY, DUOTONE_CLASSES.SECONDARY].concat(oneToTen.map(function (n) {
    return "".concat(n, "x");
  })).concat(oneToTwenty.map(function (n) {
    return "w-".concat(n);
  }));

  var initial = WINDOW.MhStyleConfig || {};

  function getAttrConfig(attr) {
    var element = DOCUMENT.querySelector('script[' + attr + ']');

    if (element) {
      return element.getAttribute(attr);
    }
  }

  function coerce(val) {
    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value
    // We'll assume that this is an indication that it should be toggled to true
    // For example <script data-search-pseudo-elements src="..."></script>
    if (val === '') return true;
    if (val === 'false') return false;
    if (val === 'true') return true;
    return val;
  }

  if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
    var attrs = [
      ['data-family-prefix', 'familyPrefix'],
      ['data-replacement-class', 'replacementClass'],
      ['data-auto-replace-svg', 'autoReplaceSvg'],
      ['data-auto-add-css', 'autoAddCss'],
      ['data-auto-a11y', 'autoA11y'],
      ['data-search-pseudo-elements', 'searchPseudoElements'],
      ['data-observe-mutations', 'observeMutations'],
      ['data-mutate-approach', 'mutateApproach'],
      ['data-keep-original-source', 'keepOriginalSource'],
      ['data-measure-performance', 'measurePerformance'],
      ['data-show-missing-icons', 'showMissingIcons']
    ];
    attrs.forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        attr = _ref2[0],
        key = _ref2[1];

      var val = coerce(getAttrConfig(attr));

      if (val !== undefined && val !== null) {
        initial[key] = val;
      }
    });
  }

  var _default = {
    familyPrefix: DEFAULT_FAMILY_PREFIX,
    replacementClass: DEFAULT_REPLACEMENT_CLASS,
    autoReplaceSvg: true,
    autoAddCss: true,
    autoA11y: true,
    searchPseudoElements: false,
    observeMutations: true,
    mutateApproach: 'async',
    keepOriginalSource: true,
    measurePerformance: false,
    showMissingIcons: true
  };

  var _config = _objectSpread({}, _default, initial);

  if (!_config.autoReplaceSvg) _config.observeMutations = false;

  var config = _objectSpread({}, _config);

  WINDOW.MhStyleConfig = config;

  var w = WINDOW || {};
  if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
  if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
  if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w[NAMESPACE_IDENTIFIER];

  var functions = [];

  var listener = function listener() {
    DOCUMENT.removeEventListener('DOMContentLoaded', listener);
    loaded = 1;
    functions.map(function (fn) {
      return fn();
    });
  };

  var loaded = false;

  if (IS_DOM) {
    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
    if (!loaded) DOCUMENT.addEventListener('DOMContentLoaded', listener);
  }

  function domready(fn) {
    if (!IS_DOM) return;
    loaded ? setTimeout(fn, 0) : functions.push(fn);
  }

  var PENDING = 'pending';
  var SETTLED = 'settled';
  var FULFILLED = 'fulfilled';
  var REJECTED = 'rejected';

  var NOOP = function NOOP() {};

  var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';
  var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
  var asyncQueue = [];
  var asyncTimer;

  function asyncFlush() {
    // run promise callbacks
    for (var i = 0; i < asyncQueue.length; i++) {
      asyncQueue[i][0](asyncQueue[i][1]);
    } // reset async asyncQueue


    asyncQueue = [];
    asyncTimer = false;
  }

  function asyncCall(callback, arg) {
    asyncQueue.push([callback, arg]);

    if (!asyncTimer) {
      asyncTimer = true;
      asyncSetTimer(asyncFlush, 0);
    }
  }

  function invokeResolver(resolver, promise) {
    function resolvePromise(value) {
      resolve(promise, value);
    }

    function rejectPromise(reason) {
      reject(promise, reason);
    }

    try {
      resolver(resolvePromise, rejectPromise);
    } catch (e) {
      rejectPromise(e);
    }
  }

  function invokeCallback(subscriber) {
    var owner = subscriber.owner;
    var settled = owner._state;
    var value = owner._data;
    var callback = subscriber[settled];
    var promise = subscriber.then;

    if (typeof callback === 'function') {
      settled = FULFILLED;

      try {
        value = callback(value);
      } catch (e) {
        reject(promise, e);
      }
    }

    if (!handleThenable(promise, value)) {
      if (settled === FULFILLED) {
        resolve(promise, value);
      }

      if (settled === REJECTED) {
        reject(promise, value);
      }
    }
  }

  function handleThenable(promise, value) {
    var resolved;

    try {
      if (promise === value) {
        throw new TypeError('A promises callback cannot return that same promise.');
      }

      if (value && (typeof value === 'function' || _typeof(value) === 'object')) {
        // then should be retrieved only once
        var then = value.then;

        if (typeof then === 'function') {
          then.call(value, function (val) {
            if (!resolved) {
              resolved = true;

              if (value === val) {
                fulfill(promise, val);
              } else {
                resolve(promise, val);
              }
            }
          }, function (reason) {
            if (!resolved) {
              resolved = true;
              reject(promise, reason);
            }
          });
          return true;
        }
      }
    } catch (e) {
      if (!resolved) {
        reject(promise, e);
      }

      return true;
    }

    return false;
  }

  function resolve(promise, value) {
    if (promise === value || !handleThenable(promise, value)) {
      fulfill(promise, value);
    }
  }

  function fulfill(promise, value) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = value;
      asyncCall(publishFulfillment, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = reason;
      asyncCall(publishRejection, promise);
    }
  }

  function publish(promise) {
    promise._then = promise._then.forEach(invokeCallback);
  }

  function publishFulfillment(promise) {
    promise._state = FULFILLED;
    publish(promise);
  }

  function publishRejection(promise) {
    promise._state = REJECTED;
    publish(promise);

    if (!promise._handled && isNode) {
      global.process.emit('unhandledRejection', promise._data, promise);
    }
  }

  function notifyRejectionHandled(promise) {
    global.process.emit('rejectionHandled', promise);
  }
  /**
   * @class
   */


  function P(resolver) {
    if (typeof resolver !== 'function') {
      throw new TypeError('Promise resolver ' + resolver + ' is not a function');
    }

    if (this instanceof P === false) {
      throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
    }

    this._then = [];
    invokeResolver(resolver, this);
  }

  P.prototype = {
    constructor: P,
    _state: PENDING,
    _then: null,
    _data: undefined,
    _handled: false,
    then: function then(onFulfillment, onRejection) {
      var subscriber = {
        owner: this,
        then: new this.constructor(NOOP),
        fulfilled: onFulfillment,
        rejected: onRejection
      };

      if ((onRejection || onFulfillment) && !this._handled) {
        this._handled = true;

        if (this._state === REJECTED && isNode) {
          asyncCall(notifyRejectionHandled, this);
        }
      }

      if (this._state === FULFILLED || this._state === REJECTED) {
        // already resolved, call callback async
        asyncCall(invokeCallback, subscriber);
      } else {
        // subscribe
        this._then.push(subscriber);
      }

      return subscriber.then;
    },
    catch: function _catch(onRejection) {
      return this.then(null, onRejection);
    }
  };

  P.all = function (promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError('You must pass an array to Promise.all().');
    }

    return new P(function (resolve, reject) {
      var results = [];
      var remaining = 0;

      function resolver(index) {
        remaining++;
        return function (value) {
          results[index] = value;

          if (!--remaining) {
            resolve(results);
          }
        };
      }

      for (var i = 0, promise; i < promises.length; i++) {
        promise = promises[i];

        if (promise && typeof promise.then === 'function') {
          promise.then(resolver(i), reject);
        } else {
          results[i] = promise;
        }
      }

      if (!remaining) {
        resolve(results);
      }
    });
  };

  P.race = function (promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError('You must pass an array to Promise.race().');
    }

    return new P(function (resolve, reject) {
      for (var i = 0, promise; i < promises.length; i++) {
        promise = promises[i];

        if (promise && typeof promise.then === 'function') {
          promise.then(resolve, reject);
        } else {
          resolve(promise);
        }
      }
    });
  };

  P.resolve = function (value) {
    if (value && _typeof(value) === 'object' && value.constructor === P) {
      return value;
    }

    return new P(function (resolve) {
      resolve(value);
    });
  };

  P.reject = function (reason) {
    return new P(function (resolve, reject) {
      reject(reason);
    });
  };

  var picked = typeof Promise === 'function' ? Promise : P;

  var d = UNITS_IN_GRID;
  var meaninglessTransform = {
    size: 16,
    x: 0,
    y: 0,
    rotate: 0,
    flipX: false,
    flipY: false
  };

  function isReserved(name) {
    return ~RESERVED_CLASSES.indexOf(name);
  }

  function bunker(fn) {
    try {
      fn();
    } catch (e) {
      if (!PRODUCTION) {
        throw e;
      }
    }
  }

  function insertCss(css) {
    if (!css || !IS_DOM) {
      return;
    }

    var style = DOCUMENT.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    var headChildren = DOCUMENT.head.childNodes;
    var beforeChild = null;

    for (var i = headChildren.length - 1; i > -1; i--) {
      var child = headChildren[i];
      var tagName = (child.tagName || '').toUpperCase();

      if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
        beforeChild = child;
      }
    }

    DOCUMENT.head.insertBefore(style, beforeChild);
    return css;
  }
  var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

  function nextUniqueId() {
    var size = 12;
    var id = '';

    while (size-- > 0) {
      id += idPool[Math.random() * 62 | 0];
    }

    return id;
  }

  function toArray(obj) {
    var array = [];

    for (var i = (obj || []).length >>> 0; i--;) {
      array[i] = obj[i];
    }

    return array;
  }

  function classArray(node) {
    if (node.classList) {
      return toArray(node.classList);
    } else {
      return (node.getAttribute('class') || '').split(' ').filter(function (i) {
        return i;
      });
    }
  }

  function getIconName(familyPrefix, cls) {
    var parts = cls.split('-');
    var prefix = parts[0];
    var iconName = parts.slice(1).join('-');

    if (prefix === familyPrefix && iconName !== '' && !isReserved(iconName)) {
      return iconName;
    } else {
      return null;
    }
  }

  function htmlEscape(str) {
    return "".concat(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  function joinAttributes(attributes) {
    return Object.keys(attributes || {}).reduce(function (acc, attributeName) {
      return acc + "".concat(attributeName, "=\"").concat(htmlEscape(attributes[attributeName]), "\" ");
    }, '').trim();
  }

  function joinStyles(styles) {
    return Object.keys(styles || {}).reduce(function (acc, styleName) {
      return acc + "".concat(styleName, ": ").concat(styles[styleName], ";");
    }, '');
  }

  function transformIsMeaningful(transform) {
    return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
  }

  function transformForSvg(_ref) {
    var transform = _ref.transform,
      containerWidth = _ref.containerWidth,
      iconWidth = _ref.iconWidth;
    var outer = {
      transform: "translate(".concat(containerWidth / 2, " 256)")
    };
    var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
    var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
    var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
    var inner = {
      transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
    };
    var path = {
      transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
    };
    return {
      outer: outer,
      inner: inner,
      path: path
    };
  }

  function transformForCss(_ref2) {
    var transform = _ref2.transform,
      _ref2$width = _ref2.width,
      width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width,
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height,
      _ref2$startCentered = _ref2.startCentered,
      startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;
    var val = '';

    if (startCentered && IS_IE) {
      val += "translate(".concat(transform.x / d - width / 2, "em, ").concat(transform.y / d - height / 2, "em) ");
    } else if (startCentered) {
      val += "translate(calc(-50% + ".concat(transform.x / d, "em), calc(-50% + ").concat(transform.y / d, "em)) ");
    } else {
      val += "translate(".concat(transform.x / d, "em, ").concat(transform.y / d, "em) ");
    }

    val += "scale(".concat(transform.size / d * (transform.flipX ? -1 : 1), ", ").concat(transform.size / d * (transform.flipY ? -1 : 1), ") ");
    val += "rotate(".concat(transform.rotate, "deg) ");
    return val;
  }

  var ALL_SPACE = {
    x: 0,
    y: 0,
    width: '100%',
    height: '100%'
  };

  function fillBlack(abstract) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (abstract.attributes && (abstract.attributes.fill || force)) {
      abstract.attributes.fill = 'black';
    }

    return abstract;
  }

  function deGroup(abstract) {
    if (abstract.tag === 'g') {
      return abstract.children;
    } else {
      return [abstract];
    }
  }

  function makeIconMasking(_ref) {
    var children = _ref.children,
      attributes = _ref.attributes,
      main = _ref.main,
      mask = _ref.mask,
      explicitMaskId = _ref.maskId,
      transform = _ref.transform;
    var mainWidth = main.width,
      mainPath = main.icon;
    var maskWidth = mask.width,
      maskPath = mask.icon;
    var trans = transformForSvg({
      transform: transform,
      containerWidth: maskWidth,
      iconWidth: mainWidth
    });
    var maskRect = {
      tag: 'rect',
      attributes: _objectSpread({}, ALL_SPACE, {
        fill: 'white'
      })
    };
    var maskInnerGroupChildrenMixin = mainPath.children ? {
      children: mainPath.children.map(fillBlack)
    } : {};
    var maskInnerGroup = {
      tag: 'g',
      attributes: _objectSpread({}, trans.inner),
      children: [fillBlack(_objectSpread({
        tag: mainPath.tag,
        attributes: _objectSpread({}, mainPath.attributes, trans.path)
      }, maskInnerGroupChildrenMixin))]
    };
    var maskOuterGroup = {
      tag: 'g',
      attributes: _objectSpread({}, trans.outer),
      children: [maskInnerGroup]
    };
    var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
    var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
    var maskTag = {
      tag: 'mask',
      attributes: _objectSpread({}, ALL_SPACE, {
        id: maskId,
        maskUnits: 'userSpaceOnUse',
        maskContentUnits: 'userSpaceOnUse'
      }),
      children: [maskRect, maskOuterGroup]
    };
    var defs = {
      tag: 'defs',
      children: [{
        tag: 'clipPath',
        attributes: {
          id: clipId
        },
        children: deGroup(maskPath)
      }, maskTag]
    };
    children.push(defs, {
      tag: 'rect',
      attributes: _objectSpread({
        fill: 'currentColor',
        'clip-path': "url(#".concat(clipId, ")"),
        mask: "url(#".concat(maskId, ")")
      }, ALL_SPACE)
    });
    return {
      children: children,
      attributes: attributes
    };
  }

  function makeIconStandard(_ref) {
    var children = _ref.children,
      attributes = _ref.attributes,
      main = _ref.main,
      transform = _ref.transform,
      styles = _ref.styles;
    var styleString = joinStyles(styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    if (transformIsMeaningful(transform)) {
      var trans = transformForSvg({
        transform: transform,
        containerWidth: main.width,
        iconWidth: main.width
      });
      children.push({
        tag: 'g',
        attributes: _objectSpread({}, trans.outer),
        children: [{
          tag: 'g',
          attributes: _objectSpread({}, trans.inner),
          children: [{
            tag: main.icon.tag,
            children: main.icon.children,
            attributes: _objectSpread({}, main.icon.attributes, trans.path)
          }]
        }]
      });
    } else {
      children.push(main.icon);
    }

    return {
      children: children,
      attributes: attributes
    };
  }

  function asIcon(_ref) {
    var children = _ref.children,
      main = _ref.main,
      mask = _ref.mask,
      attributes = _ref.attributes,
      styles = _ref.styles,
      transform = _ref.transform;

    if (transformIsMeaningful(transform) && main.found && !mask.found) {
      var width = main.width,
        height = main.height;
      var offset = {
        x: width / height / 2,
        y: 0.5
      };
      attributes['style'] = joinStyles(_objectSpread({}, styles, {
        'transform-origin': "".concat(offset.x + transform.x / 16, "em ").concat(offset.y + transform.y / 16, "em")
      }));
    }

    return [{
      tag: 'svg',
      attributes: attributes,
      children: children
    }];
  }

  function asSymbol(_ref) {
    var prefix = _ref.prefix,
      iconName = _ref.iconName,
      children = _ref.children,
      attributes = _ref.attributes,
      symbol = _ref.symbol;
    var id = symbol === true ? "".concat(prefix, "-").concat(config.familyPrefix, "-").concat(iconName) : symbol;
    return [{
      tag: 'svg',
      attributes: {
        style: 'display: none;'
      },
      children: [{
        tag: 'symbol',
        attributes: _objectSpread({}, attributes, {
          id: id
        }),
        children: children
      }]
    }];
  }

  function makeInlineSvgAbstract(params) {
    var _params$icons = params.icons,
      main = _params$icons.main,
      mask = _params$icons.mask,
      prefix = params.prefix,
      iconName = params.iconName,
      transform = params.transform,
      symbol = params.symbol,
      title = params.title,
      maskId = params.maskId,
      titleId = params.titleId,
      extra = params.extra,
      _params$watchable = params.watchable,
      watchable = _params$watchable === void 0 ? false : _params$watchable;

    var _ref = mask.found ? mask : main,
      width = _ref.width,
      height = _ref.height;

    var isUploadedIcon = prefix === 'fak';
    var widthClass = isUploadedIcon ? '' : "mhi-w-".concat(Math.ceil(width / height * 16));
    var attrClass = [config.replacementClass, iconName ? "".concat(config.familyPrefix, "-").concat(iconName) : '', widthClass].filter(function (c) {
      return extra.classes.indexOf(c) === -1;
    }).filter(function (c) {
      return c !== '' || !!c;
    }).concat(extra.classes).join(' ');
    var content = {
      children: [],
      attributes: _objectSpread({}, extra.attributes, {
        'data-prefix': prefix,
        'data-icon': iconName,
        'class': attrClass,
        'role': extra.attributes.role || 'img',
        'xmlns': 'http://www.w3.org/2000/svg',
        'viewBox': "0 0 ".concat(width, " ").concat(height)
      })
    };
    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf('mh-fw') ? {
      width: "".concat(width / height * 16 * 0.0625, "em")
    } : {};

    if (watchable) {
      content.attributes[DATA_FA_I2SVG] = '';
    }

    if (title) content.children.push({
      tag: 'title',
      attributes: {
        id: content.attributes['aria-labelledby'] || "title-".concat(titleId || nextUniqueId())
      },
      children: [title]
    });

    var args = _objectSpread({}, content, {
      prefix: prefix,
      iconName: iconName,
      main: main,
      mask: mask,
      maskId: maskId,
      transform: transform,
      symbol: symbol,
      styles: _objectSpread({}, uploadedIconWidthStyle, extra.styles)
    });

    var _ref2 = mask.found && main.found ? makeIconMasking(args) : makeIconStandard(args),
      children = _ref2.children,
      attributes = _ref2.attributes;

    args.children = children;
    args.attributes = attributes;

    if (symbol) {
      return asSymbol(args);
    } else {
      return asIcon(args);
    }
  }

  function makeLayersTextAbstract(params) {
    var content = params.content,
      width = params.width,
      height = params.height,
      transform = params.transform,
      title = params.title,
      extra = params.extra,
      _params$watchable2 = params.watchable,
      watchable = _params$watchable2 === void 0 ? false : _params$watchable2;

    var attributes = _objectSpread({}, extra.attributes, title ? {
      'title': title
    } : {}, {
      'class': extra.classes.join(' ')
    });

    if (watchable) {
      attributes[DATA_FA_I2SVG] = '';
    }

    var styles = _objectSpread({}, extra.styles);

    if (transformIsMeaningful(transform)) {
      styles['transform'] = transformForCss({
        transform: transform,
        startCentered: true,
        width: width,
        height: height
      });
      styles['-webkit-transform'] = styles['transform'];
    }

    var styleString = joinStyles(styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    var val = [];
    val.push({
      tag: 'span',
      attributes: attributes,
      children: [content]
    });

    if (title) {
      val.push({
        tag: 'span',
        attributes: {
          class: 'sr-only'
        },
        children: [title]
      });
    }

    return val;
  }

  function makeLayersCounterAbstract(params) {
    var content = params.content,
      title = params.title,
      extra = params.extra;

    var attributes = _objectSpread({}, extra.attributes, title ? {
      'title': title
    } : {}, {
      'class': extra.classes.join(' ')
    });

    var styleString = joinStyles(extra.styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    var val = [];
    val.push({
      tag: 'span',
      attributes: attributes,
      children: [content]
    });

    if (title) {
      val.push({
        tag: 'span',
        attributes: {
          class: 'sr-only'
        },
        children: [title]
      });
    }

    return val;
  }

  var noop$1 = function noop() {};

  var p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
    mark: noop$1,
    measure: noop$1
  };
  var preamble = "FA \"5.15.2\"";

  var begin = function begin(name) {
    p.mark("".concat(preamble, " ").concat(name, " begins"));
    return function () {
      return end(name);
    };
  };

  var end = function end(name) {
    p.mark("".concat(preamble, " ").concat(name, " ends"));
    p.measure("".concat(preamble, " ").concat(name), "".concat(preamble, " ").concat(name, " begins"), "".concat(preamble, " ").concat(name, " ends"));
  };

  var perf = {
    begin: begin,
    end: end
  };

  /**
   * Internal helper to bind a function known to have 4 arguments
   * to a given context.
   */

  var bindInternal4 = function bindInternal4(func, thisContext) {
    return function (a, b, c, d) {
      return func.call(thisContext, a, b, c, d);
    };
  };

  /**
   * # Reduce
   *
   * A fast object `.reduce()` implementation.
   *
   * @param  {Object}   subject      The object to reduce over.
   * @param  {Function} fn           The reducer function.
   * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
   * @param  {Object}   thisContext  The context for the reducer.
   * @return {mixed}                 The final result.
   */


  var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
    var keys = Object.keys(subject),
      length = keys.length,
      iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,
      i,
      key,
      result;

    if (initialValue === undefined) {
      i = 1;
      result = subject[keys[0]];
    } else {
      i = 0;
      result = initialValue;
    }

    for (; i < length; i++) {
      key = keys[i];
      result = iterator(result, subject[key], key, subject);
    }

    return result;
  };

  function toHex(unicode) {
    var result = '';

    for (var i = 0; i < unicode.length; i++) {
      var hex = unicode.charCodeAt(i).toString(16);
      result += ('000' + hex).slice(-4);
    }

    return result;
  }

  function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks,
      skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = Object.keys(icons).reduce(function (acc, iconName) {
      var icon = icons[iconName];
      var expanded = !!icon.icon;

      if (expanded) {
        acc[icon.iconName] = icon.icon;
      } else {
        acc[iconName] = icon;
      }

      return acc;
    }, {});

    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
      namespace.hooks.addPack(prefix, normalized);
    } else {
      namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll easy the upgrade process for our users by automatically defining
     * this as well.
     */


    if (prefix === 'fas') {
      defineIcons('fa', icons);
    }
  }

  var styles = namespace.styles,
    shims = namespace.shims;
  var _byUnicode = {};
  var _byLigature = {};
  var _byOldName = {};
  var build = function build() {
    var lookup = function lookup(reducer) {
      return reduce(styles, function (o, style, prefix) {
        o[prefix] = reduce(style, reducer, {});
        return o;
      }, {});
    };

    _byUnicode = lookup(function (acc, icon, iconName) {
      if (icon[3]) {
        acc[icon[3]] = iconName;
      }

      return acc;
    });
    _byLigature = lookup(function (acc, icon, iconName) {
      var ligatures = icon[2];
      acc[iconName] = iconName;
      ligatures.forEach(function (ligature) {
        acc[ligature] = iconName;
      });
      return acc;
    });
    var hasRegular = 'far' in styles;
    _byOldName = reduce(shims, function (acc, shim) {
      var oldName = shim[0];
      var prefix = shim[1];
      var iconName = shim[2];

      if (prefix === 'far' && !hasRegular) {
        prefix = 'fas';
      }

      acc[oldName] = {
        prefix: prefix,
        iconName: iconName
      };
      return acc;
    }, {});
  };
  build();

  function byUnicode(prefix, unicode) {
    return (_byUnicode[prefix] || {})[unicode];
  }

  function byLigature(prefix, ligature) {
    return (_byLigature[prefix] || {})[ligature];
  }

  function byOldName(name) {
    return _byOldName[name] || {
      prefix: null,
      iconName: null
    };
  }

  var styles$1 = namespace.styles;
  var emptyCanonicalIcon = function emptyCanonicalIcon() {
    return {
      prefix: null,
      iconName: null,
      rest: []
    };
  };

  function getCanonicalIcon(values) {
    return values.reduce(function (acc, cls) {
      var iconName = getIconName(config.familyPrefix, cls);

      if (styles$1[cls]) {
        acc.prefix = cls;
      } else if (config.autoFetchSvg && Object.keys(PREFIX_TO_STYLE).indexOf(cls) > -1) {
        acc.prefix = cls;
      } else if (iconName) {
        var shim = acc.prefix === 'mhi' ? byOldName(iconName) : {};
        acc.iconName = shim.iconName || iconName;
        acc.prefix = shim.prefix || acc.prefix;
      } else if (cls !== config.replacementClass && cls.indexOf('mhi-w-') !== 0) {
        acc.rest.push(cls);
      }

      return acc;
    }, emptyCanonicalIcon());
  }

  function iconFromMapping(mapping, prefix, iconName) {
    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
      return {
        prefix: prefix,
        iconName: iconName,
        icon: mapping[prefix][iconName]
      };
    }
  }

  function toHtml(abstractNodes) {
    var tag = abstractNodes.tag,
      _abstractNodes$attrib = abstractNodes.attributes,
      attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib,
      _abstractNodes$childr = abstractNodes.children,
      children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;

    if (typeof abstractNodes === 'string') {
      return htmlEscape(abstractNodes);
    } else {
      return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(''), "</").concat(tag, ">");
    }
  }

  var noop$2 = function noop() {};

  function isWatched(node) {
    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
    return typeof i2svg === 'string';
  }

  function getMutator() {
    if (config.autoReplaceSvg === true) {
      return mutators.replace;
    }

    var mutator = mutators[config.autoReplaceSvg];
    return mutator || mutators.replace;
  }

  var mutators = {
    replace: function replace(mutation) {
      var node = mutation[0];
      var abstract = mutation[1];
      var newOuterHTML = abstract.map(function (a) {
        return toHtml(a);
      }).join('\n');

      if (node.parentNode && node.outerHTML) {
        node.outerHTML = newOuterHTML + (config.keepOriginalSource && node.tagName.toLowerCase() !== 'svg' ? "<!-- ".concat(node.outerHTML, " MH-Style Icon mhstyle.net -->") : '');
      } else if (node.parentNode) {
        var newNode = document.createElement('span');
        node.parentNode.replaceChild(newNode, node);
        newNode.outerHTML = newOuterHTML;
      }
    },
    nest: function nest(mutation) {
      var node = mutation[0];
      var abstract = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.
      // Short-circuit to the standard replacement

      if (~classArray(node).indexOf(config.replacementClass)) {
        return mutators.replace(mutation);
      }

      var forSvg = new RegExp("".concat(config.familyPrefix, "-.*"));
      delete abstract[0].attributes.style;
      delete abstract[0].attributes.id;
      var splitClasses = abstract[0].attributes.class.split(' ').reduce(function (acc, cls) {
        if (cls === config.replacementClass || cls.match(forSvg)) {
          acc.toSvg.push(cls);
        } else {
          acc.toNode.push(cls);
        }

        return acc;
      }, {
        toNode: [],
        toSvg: []
      });
      abstract[0].attributes.class = splitClasses.toSvg.join(' ');
      var newInnerHTML = abstract.map(function (a) {
        return toHtml(a);
      }).join('\n');
      node.setAttribute('class', splitClasses.toNode.join(' '));
      node.setAttribute(DATA_FA_I2SVG, '');
      node.innerHTML = newInnerHTML;
    }
  };

  function performOperationSync(op) {
    op();
  }

  function perform(mutations, callback) {
    var callbackFunction = typeof callback === 'function' ? callback : noop$2;

    if (mutations.length === 0) {
      callbackFunction();
    } else {
      var frame = performOperationSync;

      if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
        frame = WINDOW.requestAnimationFrame || performOperationSync;
      }

      frame(function () {
        var mutator = getMutator();
        var mark = perf.begin('mutate');
        mutations.map(mutator);
        mark();
        callbackFunction();
      });
    }
  }
  var disabled = false;

  function disableObservation() {
    disabled = true;
  }

  function enableObservation() {
    disabled = false;
  }
  var mo = null;

  function observe(options) {
    if (!MUTATION_OBSERVER) {
      return;
    }

    if (!config.observeMutations) {
      return;
    }

    var treeCallback = options.treeCallback,
      nodeCallback = options.nodeCallback,
      pseudoElementsCallback = options.pseudoElementsCallback,
      _options$observeMutat = options.observeMutationsRoot,
      observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
    mo = new MUTATION_OBSERVER(function (objects) {
      if (disabled) return;
      toArray(objects).forEach(function (mutationRecord) {
        if (mutationRecord.type === 'childList' && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
          if (config.searchPseudoElements) {
            pseudoElementsCallback(mutationRecord.target);
          }

          treeCallback(mutationRecord.target);
        }

        if (mutationRecord.type === 'attributes' && mutationRecord.target.parentNode && config.searchPseudoElements) {
          pseudoElementsCallback(mutationRecord.target.parentNode);
        }

        if (mutationRecord.type === 'attributes' && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
          if (mutationRecord.attributeName === 'class') {
            var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)),
              prefix = _getCanonicalIcon.prefix,
              iconName = _getCanonicalIcon.iconName;

            if (prefix) mutationRecord.target.setAttribute('data-prefix', prefix);
            if (iconName) mutationRecord.target.setAttribute('data-icon', iconName);
          } else {
            nodeCallback(mutationRecord.target);
          }
        }
      });
    });
    if (!IS_DOM) return;
    mo.observe(observeMutationsRoot, {
      childList: true,
      attributes: true,
      characterData: true,
      subtree: true
    });
  }

  function disconnect() {
    if (!mo) return;
    mo.disconnect();
  }

  function styleParser(node) {
    var style = node.getAttribute('style');
    var val = [];

    if (style) {
      val = style.split(';').reduce(function (acc, style) {
        var styles = style.split(':');
        var prop = styles[0];
        var value = styles.slice(1);

        if (prop && value.length > 0) {
          acc[prop] = value.join(':').trim();
        }

        return acc;
      }, {});
    }

    return val;
  }

  function classParser(node) {
    var existingPrefix = node.getAttribute('data-prefix');
    var existingIconName = node.getAttribute('data-icon');
    var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
    var val = getCanonicalIcon(classArray(node));

    if (existingPrefix && existingIconName) {
      val.prefix = existingPrefix;
      val.iconName = existingIconName;
    }

    if (val.prefix && innerText.length > 1) {
      val.iconName = byLigature(val.prefix, node.innerText);
    } else if (val.prefix && innerText.length === 1) {
      val.iconName = byUnicode(val.prefix, toHex(node.innerText));
    }

    return val;
  }

  var parseTransformString = function parseTransformString(transformString) {
    var transform = {
      size: 16,
      x: 0,
      y: 0,
      flipX: false,
      flipY: false,
      rotate: 0
    };

    if (!transformString) {
      return transform;
    } else {
      return transformString.toLowerCase().split(' ').reduce(function (acc, n) {
        var parts = n.toLowerCase().split('-');
        var first = parts[0];
        var rest = parts.slice(1).join('-');

        if (first && rest === 'h') {
          acc.flipX = true;
          return acc;
        }

        if (first && rest === 'v') {
          acc.flipY = true;
          return acc;
        }

        rest = parseFloat(rest);

        if (isNaN(rest)) {
          return acc;
        }

        switch (first) {
          case 'grow':
            acc.size = acc.size + rest;
            break;

          case 'shrink':
            acc.size = acc.size - rest;
            break;

          case 'left':
            acc.x = acc.x - rest;
            break;

          case 'right':
            acc.x = acc.x + rest;
            break;

          case 'up':
            acc.y = acc.y - rest;
            break;

          case 'down':
            acc.y = acc.y + rest;
            break;

          case 'rotate':
            acc.rotate = acc.rotate + rest;
            break;
        }

        return acc;
      }, transform);
    }
  };

  function transformParser(node) {
    return parseTransformString(node.getAttribute('data-mh-transform'));
  }

  function symbolParser(node) {
    var symbol = node.getAttribute('data-mh-symbol');
    return symbol === null ? false : symbol === '' ? true : symbol;
  }

  function attributesParser(node) {
    var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
      if (acc.name !== 'class' && acc.name !== 'style') {
        acc[attr.name] = attr.value;
      }

      return acc;
    }, {});
    var title = node.getAttribute('title');
    var titleId = node.getAttribute('data-mh-title-id');

    if (config.autoA11y) {
      if (title) {
        extraAttributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
      } else {
        extraAttributes['aria-hidden'] = 'true';
        extraAttributes['focusable'] = 'false';
      }
    }

    return extraAttributes;
  }

  function maskParser(node) {
    var mask = node.getAttribute('data-mh-mask');

    if (!mask) {
      return emptyCanonicalIcon();
    } else {
      return getCanonicalIcon(mask.split(' ').map(function (i) {
        return i.trim();
      }));
    }
  }

  function blankMeta() {
    return {
      iconName: null,
      title: null,
      titleId: null,
      prefix: null,
      transform: meaninglessTransform,
      symbol: false,
      mask: null,
      maskId: null,
      extra: {
        classes: [],
        styles: {},
        attributes: {}
      }
    };
  }

  function parseMeta(node) {
    var _classParser = classParser(node),
      iconName = _classParser.iconName,
      prefix = _classParser.prefix,
      extraClasses = _classParser.rest;

    var extraStyles = styleParser(node);
    var transform = transformParser(node);
    var symbol = symbolParser(node);
    var extraAttributes = attributesParser(node);
    var mask = maskParser(node);
    return {
      iconName: iconName,
      title: node.getAttribute('title'),
      titleId: node.getAttribute('data-mh-title-id'),
      prefix: prefix,
      transform: transform,
      symbol: symbol,
      mask: mask,
      maskId: node.getAttribute('data-mh-mask-id'),
      extra: {
        classes: extraClasses,
        styles: extraStyles,
        attributes: extraAttributes
      }
    };
  }

  function MissingIcon(error) {
    this.name = 'MissingIcon';
    this.message = error || 'Icon unavailable';
    this.stack = new Error().stack;
  }
  MissingIcon.prototype = Object.create(Error.prototype);
  MissingIcon.prototype.constructor = MissingIcon;

  var FILL = {
    fill: 'currentColor'
  };
  var ANIMATION_BASE = {
    attributeType: 'XML',
    repeatCount: 'indefinite',
    dur: '2s'
  };
  var RING = {
    tag: 'path',
    attributes: _objectSpread({}, FILL, {
      d: 'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z'
    })
  };

  var OPACITY_ANIMATE = _objectSpread({}, ANIMATION_BASE, {
    attributeName: 'opacity'
  });

  var DOT = {
    tag: 'circle',
    attributes: _objectSpread({}, FILL, {
      cx: '256',
      cy: '364',
      r: '28'
    }),
    children: [{
      tag: 'animate',
      attributes: _objectSpread({}, ANIMATION_BASE, {
        attributeName: 'r',
        values: '28;14;28;28;14;28;'
      })
    }, {
      tag: 'animate',
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: '1;0;1;1;0;1;'
      })
    }]
  };
  var QUESTION = {
    tag: 'path',
    attributes: _objectSpread({}, FILL, {
      opacity: '1',
      d: 'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z'
    }),
    children: [{
      tag: 'animate',
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: '1;0;0;0;0;1;'
      })
    }]
  };
  var EXCLAMATION = {
    tag: 'path',
    attributes: _objectSpread({}, FILL, {
      opacity: '0',
      d: 'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z'
    }),
    children: [{
      tag: 'animate',
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: '0;0;1;1;0;0;'
      })
    }]
  };
  var missing = {
    tag: 'g',
    children: [RING, DOT, QUESTION, EXCLAMATION]
  };

  var styles$2 = namespace.styles;

  function asFoundIcon(icon) {
    var width = icon[0];
    var height = icon[1];

    var _icon$slice = icon.slice(4),
      _icon$slice2 = _slicedToArray(_icon$slice, 1),
      vectorData = _icon$slice2[0];

    var element = null;

    if (Array.isArray(vectorData)) {
      element = {
        tag: 'g',
        attributes: {
          class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
        },
        children: [{
          tag: 'path',
          attributes: {
            class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
            fill: 'currentColor',
            d: vectorData[0]
          }
        }, {
          tag: 'path',
          attributes: {
            class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
            fill: 'currentColor',
            d: vectorData[1]
          }
        }]
      };
    } else {
      element = {
        tag: 'path',
        attributes: {
          fill: 'currentColor',
          d: vectorData
        }
      };
    }

    return {
      found: true,
      width: width,
      height: height,
      icon: element
    };
  }

  function findIcon(iconName, prefix) {
    return new picked(function (resolve, reject) {
      var val = {
        found: false,
        width: 512,
        height: 512,
        icon: missing
      };

      if (iconName && prefix && styles$2[prefix] && styles$2[prefix][iconName]) {
        var icon = styles$2[prefix][iconName];
        return resolve(asFoundIcon(icon));
      }

      if (iconName && prefix && !config.showMissingIcons) {
        reject(new MissingIcon("Icon is missing for prefix ".concat(prefix, " with icon name ").concat(iconName)));
      } else {
        resolve(val);
      }
    });
  }

  var styles$3 = namespace.styles;

  function generateSvgReplacementMutation(node, nodeMeta) {
    var iconName = nodeMeta.iconName,
      title = nodeMeta.title,
      titleId = nodeMeta.titleId,
      prefix = nodeMeta.prefix,
      transform = nodeMeta.transform,
      symbol = nodeMeta.symbol,
      mask = nodeMeta.mask,
      maskId = nodeMeta.maskId,
      extra = nodeMeta.extra;
    return new picked(function (resolve, reject) {
      picked.all([findIcon(iconName, prefix), findIcon(mask.iconName, mask.prefix)]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          main = _ref2[0],
          mask = _ref2[1];

        resolve([node, makeInlineSvgAbstract({
          icons: {
            main: main,
            mask: mask
          },
          prefix: prefix,
          iconName: iconName,
          transform: transform,
          symbol: symbol,
          mask: mask,
          maskId: maskId,
          title: title,
          titleId: titleId,
          extra: extra,
          watchable: true
        })]);
      });
    });
  }

  function generateLayersText(node, nodeMeta) {
    var title = nodeMeta.title,
      transform = nodeMeta.transform,
      extra = nodeMeta.extra;
    var width = null;
    var height = null;

    if (IS_IE) {
      var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
      var boundingClientRect = node.getBoundingClientRect();
      width = boundingClientRect.width / computedFontSize;
      height = boundingClientRect.height / computedFontSize;
    }

    if (config.autoA11y && !title) {
      extra.attributes['aria-hidden'] = 'true';
    }

    return picked.resolve([node, makeLayersTextAbstract({
      content: node.innerHTML,
      width: width,
      height: height,
      transform: transform,
      title: title,
      extra: extra,
      watchable: true
    })]);
  }

  function generateMutation(node) {
    var nodeMeta = parseMeta(node);

    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
      return generateLayersText(node, nodeMeta);
    } else {
      return generateSvgReplacementMutation(node, nodeMeta);
    }
  }

  function onTree(root) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (!IS_DOM) return;
    var htmlClassList = DOCUMENT.documentElement.classList;

    var hclAdd = function hclAdd(suffix) {
      return htmlClassList.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
    };

    var hclRemove = function hclRemove(suffix) {
      return htmlClassList.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
    };

    var prefixes = config.autoFetchSvg ? Object.keys(PREFIX_TO_STYLE) : Object.keys(styles$3);
    var prefixesDomQuery = [".".concat(LAYERS_TEXT_CLASSNAME, ":not([").concat(DATA_FA_I2SVG, "])")].concat(prefixes.map(function (p) {
      return ".".concat(p, ":not([").concat(DATA_FA_I2SVG, "])");
    })).join(', ');

    if (prefixesDomQuery.length === 0) {
      return;
    }

    var candidates = [];

    try {
      candidates = toArray(root.querySelectorAll(prefixesDomQuery));
    } catch (e) { // noop
    }

    if (candidates.length > 0) {
      hclAdd('pending');
      hclRemove('complete');
    } else {
      return;
    }

    var mark = perf.begin('onTree');
    var mutations = candidates.reduce(function (acc, node) {
      try {
        var mutation = generateMutation(node);

        if (mutation) {
          acc.push(mutation);
        }
      } catch (e) {
        if (!PRODUCTION) {
          if (e instanceof MissingIcon) {
            console.error(e);
          }
        }
      }

      return acc;
    }, []);
    return new picked(function (resolve, reject) {
      picked.all(mutations).then(function (resolvedMutations) {
        perform(resolvedMutations, function () {
          hclAdd('active');
          hclAdd('complete');
          hclRemove('pending');
          if (typeof callback === 'function') callback();
          mark();
          resolve();
        });
      }).catch(function () {
        mark();
        reject();
      });
    });
  }

  function onNode(node) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    generateMutation(node).then(function (mutation) {
      if (mutation) {
        perform([mutation], callback);
      }
    });
  }

  function replaceForPosition(node, position) {
    var pendingAttribute = "".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(':', '-'));
    return new picked(function (resolve, reject) {
      if (node.getAttribute(pendingAttribute) !== null) {
        // This node is already being processed
        return resolve();
      }

      var children = toArray(node.children);
      var alreadyProcessedPseudoElement = children.filter(function (c) {
        return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
      })[0];
      var styles = WINDOW.getComputedStyle(node, position);
      var fontFamily = styles.getPropertyValue('font-family').match(FONT_FAMILY_PATTERN);
      var fontWeight = styles.getPropertyValue('font-weight');
      var content = styles.getPropertyValue('content');

      if (alreadyProcessedPseudoElement && !fontFamily) {
        // If we've already processed it but the current computed style does not result in a font-family,
        // that probably means that a class name that was previously present to make the icon has been
        // removed. So we now should delete the icon.
        node.removeChild(alreadyProcessedPseudoElement);
        return resolve();
      } else if (fontFamily && content !== 'none' && content !== '') {
        var _content = styles.getPropertyValue('content');

        var prefix = ~['Mhstyle'].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[fontWeight];
        var hexValue = toHex(_content.length === 3 ? _content.substr(1, 1) : _content);
        var iconName = byUnicode(prefix, hexValue);
        var iconIdentifier = iconName; // Only convert the pseudo element in this :before/:after position into an icon if we haven't
        // already done so with the same prefix and iconName

        if (iconName && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
          node.setAttribute(pendingAttribute, iconIdentifier);

          if (alreadyProcessedPseudoElement) {
            // Delete the old one, since we're replacing it with a new one
            node.removeChild(alreadyProcessedPseudoElement);
          }

          var meta = blankMeta();
          var extra = meta.extra;
          extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
          findIcon(iconName, prefix).then(function (main) {
            var abstract = makeInlineSvgAbstract(_objectSpread({}, meta, {
              icons: {
                main: main,
                mask: emptyCanonicalIcon()
              },
              prefix: prefix,
              iconName: iconIdentifier,
              extra: extra,
              watchable: true
            }));
            var element = DOCUMENT.createElement('svg');

            if (position === ':before') {
              node.insertBefore(element, node.firstChild);
            } else {
              node.appendChild(element);
            }

            element.outerHTML = abstract.map(function (a) {
              return toHtml(a);
            }).join('\n');
            node.removeAttribute(pendingAttribute);
            resolve();
          }).catch(reject);
        } else {
          resolve();
        }
      } else {
        resolve();
      }
    });
  }

  function replace(node) {
    return picked.all([replaceForPosition(node, ':before'), replaceForPosition(node, ':after')]);
  }

  function processable(node) {
    return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== 'svg');
  }

  function searchPseudoElements(root) {
    if (!IS_DOM) return;
    return new picked(function (resolve, reject) {
      var operations = toArray(root.querySelectorAll('*')).filter(processable).map(replace);
      var end = perf.begin('searchPseudoElements');
      disableObservation();
      picked.all(operations).then(function () {
        end();
        enableObservation();
        resolve();
      }).catch(function () {
        end();
        enableObservation();
        reject();
      });
    });
  }

  var baseStyles = "svg:not(:root).mh{overflow:visible}.mh{display:inline-block;font-size:inherit;height:1em;overflow:visible;vertical-align:-.125em}.mh.mhi-lg{vertical-align:-.225em}.mh.mhi-w-1{width:.0625em}.mh.mhi-w-2{width:.125em}.mh.mhi-w-3{width:.1875em}.mh.mhi-w-4{width:.25em}.mh.mhi-w-5{width:.3125em}.mh.mhi-w-6{width:.375em}.mh.mhi-w-7{width:.4375em}.mh.mhi-w-8{width:.5em}.mh.mhi-w-9{width:.5625em}.mh.mhi-w-10{width:.625em}.mh.mhi-w-11{width:.6875em}.mh.mhi-w-12{width:.75em}.mh.mhi-w-13{width:.8125em}.mh.mhi-w-14{width:.875em}.mh.mhi-w-15{width:.9375em}.mh.mhi-w-16{width:1em}.mh.mhi-w-17{width:1.0625em}.mh.mhi-w-18{width:1.125em}.mh.mhi-w-19{width:1.1875em}.mh.mhi-w-20{width:1.25em}.mh.mhi-pull-left{margin-right:.3em;width:auto}.mh.mhi-pull-right{margin-left:.3em;width:auto}.mh.mhi-border{height:1.5em}.mh.mhi-li{width:2em}.mh.mhi-fw{width:1.25em}.mhi-layers svg.mh{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.mhi-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.mhi-layers svg.mh{-webkit-transform-origin:center center;transform-origin:center center}.mhi-layers-counter,.mhi-layers-text{display:inline-block;position:absolute;text-align:center}.mhi-layers-text{left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transform-origin:center center;transform-origin:center center}.mhi-layers-counter{background-color:#ff253a;border-radius:1em;-webkit-box-sizing:border-box;box-sizing:border-box;color:#fff;height:1.5em;line-height:1;max-width:5em;min-width:1.5em;overflow:hidden;padding:.25em;right:0;text-overflow:ellipsis;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.mhi-layers-bottom-right{bottom:0;right:0;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom right;transform-origin:bottom right}.mhi-layers-bottom-left{bottom:0;left:0;right:auto;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom left;transform-origin:bottom left}.mhi-layers-top-right{right:0;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.mhi-layers-top-left{left:0;right:auto;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top left;transform-origin:top left}.mhi-lg{font-size:1.3333333333em;line-height:.75em;vertical-align:-.0667em}.mhi-xs{font-size:.75em}.mhi-sm{font-size:.875em}.mhi-1x{font-size:1em}.mhi-2x{font-size:2em}.mhi-3x{font-size:3em}.mhi-4x{font-size:4em}.mhi-5x{font-size:5em}.mhi-6x{font-size:6em}.mhi-7x{font-size:7em}.mhi-8x{font-size:8em}.mhi-9x{font-size:9em}.mhi-10x{font-size:10em}.mhi-fw{text-align:center;width:1.25em}.mhi-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.mhi-ul>li{position:relative}.mhi-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.mhi-border{border:solid .08em #eee;border-radius:.1em;padding:.2em .25em .15em}.mhi-pull-left{float:left}.mhi-pull-right{float:right}.mhi-spin{-webkit-animation:mhi-spin 2s infinite linear;animation:mhi-spin 2s infinite linear}.mhi-pulse{-webkit-animation:mhi-spin 1s infinite steps(8);animation:mhi-spin 1s infinite steps(8)}@-webkit-keyframes mhi-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes mhi-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.mhi-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.mhi-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.mhi-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.mhi-flip-horizontal{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.mhi-flip-vertical{-webkit-transform:scale(1,-1);transform:scale(1,-1)}.mhi-flip-both,.mhi-flip-horizontal.mhi-flip-vertical{-webkit-transform:scale(-1,-1);transform:scale(-1,-1)}:root .mhi-flip-both,:root .mhi-flip-horizontal,:root .mhi-flip-vertical,:root .mhi-rotate-180,:root .mhi-rotate-270,:root .mhi-rotate-90{-webkit-filter:none;filter:none}.mhi-stack{display:inline-block;height:2em;position:relative;width:2.5em}.mhi-stack-1x,.mhi-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.mh.mhi-stack-1x{height:1em;width:1.25em}.mh.mhi-stack-2x{height:2em;width:2.5em}.mhi-inverse{color:#fff}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}.mh .mhi-primary{fill:var(--mhi-primary-color,currentColor);opacity:1;opacity:var(--mhi-primary-opacity,1)}.mh .mhi-secondary{fill:var(--mhi-secondary-color,currentColor);opacity:.4;opacity:var(--mhi-secondary-opacity,.4)}.mh.mhi-swap-opacity .mhi-primary{opacity:.4;opacity:var(--mhi-secondary-opacity,.4)}.mh.mhi-swap-opacity .mhi-secondary{opacity:1;opacity:var(--mhi-primary-opacity,1)}.mh mask .mhi-primary,.mh mask .mhi-secondary{fill:#000}.mhi-inverse{color:#fff}";

  function css() {
    var dfp = DEFAULT_FAMILY_PREFIX;
    var drc = DEFAULT_REPLACEMENT_CLASS;
    var fp = config.familyPrefix;
    var rc = config.replacementClass;
    var s = baseStyles;

    if (fp !== dfp || rc !== drc) {
      var dPatt = new RegExp("\\.".concat(dfp, "\\-"), 'g');
      var customPropPatt = new RegExp("\\--".concat(dfp, "\\-"), 'g');
      var rPatt = new RegExp("\\.".concat(drc), 'g');
      s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
    }

    return s;
  }

  var Library =
    /*#__PURE__*/
    function () {
      function Library() {
        _classCallCheck(this, Library);

        this.definitions = {};
      }

      _createClass(Library, [{
        key: "add",
        value: function add() {
          var _this = this;

          for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
            definitions[_key] = arguments[_key];
          }

          var additions = definitions.reduce(this._pullDefinitions, {});
          Object.keys(additions).forEach(function (key) {
            _this.definitions[key] = _objectSpread({}, _this.definitions[key] || {}, additions[key]);
            defineIcons(key, additions[key]);
            build();
          });
        }
      }, {
        key: "reset",
        value: function reset() {
          this.definitions = {};
        }
      }, {
        key: "_pullDefinitions",
        value: function _pullDefinitions(additions, definition) {
          var normalized = definition.prefix && definition.iconName && definition.icon ? {
            0: definition
          } : definition;
          Object.keys(normalized).map(function (key) {
            var _normalized$key = normalized[key],
              prefix = _normalized$key.prefix,
              iconName = _normalized$key.iconName,
              icon = _normalized$key.icon;
            if (!additions[prefix]) additions[prefix] = {};
            additions[prefix][iconName] = icon;
          });
          return additions;
        }
      }]);

      return Library;
    }();

  function ensureCss() {
    if (config.autoAddCss && !_cssInserted) {
      insertCss(css());

      _cssInserted = true;
    }
  }

  function apiObject(val, abstractCreator) {
    Object.defineProperty(val, 'abstract', {
      get: abstractCreator
    });
    Object.defineProperty(val, 'html', {
      get: function get() {
        return val.abstract.map(function (a) {
          return toHtml(a);
        });
      }
    });
    Object.defineProperty(val, 'node', {
      get: function get() {
        if (!IS_DOM) return;
        var container = DOCUMENT.createElement('div');
        container.innerHTML = val.html;
        return container.children;
      }
    });
    return val;
  }

  function findIconDefinition(iconLookup) {
    var _iconLookup$prefix = iconLookup.prefix,
      prefix = _iconLookup$prefix === void 0 ? 'fa' : _iconLookup$prefix,
      iconName = iconLookup.iconName;
    if (!iconName) return;
    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
  }

  function resolveIcons(next) {
    return function (maybeIconDefinition) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
      var mask = params.mask;

      if (mask) {
        mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
      }

      return next(iconDefinition, _objectSpread({}, params, {
        mask: mask
      }));
    };
  }

  var library = new Library();
  var noAuto = function noAuto() {
    config.autoReplaceSvg = false;
    config.observeMutations = false;
    disconnect();
  };
  var _cssInserted = false;
  var dom = {
    i2svg: function i2svg() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (IS_DOM) {
        ensureCss();
        var _params$node = params.node,
          node = _params$node === void 0 ? DOCUMENT : _params$node,
          _params$callback = params.callback,
          callback = _params$callback === void 0 ? function () {} : _params$callback;

        if (config.searchPseudoElements) {
          searchPseudoElements(node);
        }

        return onTree(node, callback);
      } else {
        return picked.reject('Operation requires a DOM of some kind.');
      }
    },
    css: css,
    insertCss: function insertCss$$1() {
      if (!_cssInserted) {
        insertCss(css());

        _cssInserted = true;
      }
    },
    watch: function watch() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var autoReplaceSvgRoot = params.autoReplaceSvgRoot,
        observeMutationsRoot = params.observeMutationsRoot;

      if (config.autoReplaceSvg === false) {
        config.autoReplaceSvg = true;
      }

      config.observeMutations = true;
      domready(function () {
        autoReplace({
          autoReplaceSvgRoot: autoReplaceSvgRoot
        });
        observe({
          treeCallback: onTree,
          nodeCallback: onNode,
          pseudoElementsCallback: searchPseudoElements,
          observeMutationsRoot: observeMutationsRoot
        });
      });
    }
  };
  var parse = {
    transform: function transform(transformString) {
      return parseTransformString(transformString);
    }
  };
  var icon = resolveIcons(function (iconDefinition) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$transform = params.transform,
      transform = _params$transform === void 0 ? meaninglessTransform : _params$transform,
      _params$symbol = params.symbol,
      symbol = _params$symbol === void 0 ? false : _params$symbol,
      _params$mask = params.mask,
      mask = _params$mask === void 0 ? null : _params$mask,
      _params$maskId = params.maskId,
      maskId = _params$maskId === void 0 ? null : _params$maskId,
      _params$title = params.title,
      title = _params$title === void 0 ? null : _params$title,
      _params$titleId = params.titleId,
      titleId = _params$titleId === void 0 ? null : _params$titleId,
      _params$classes = params.classes,
      classes = _params$classes === void 0 ? [] : _params$classes,
      _params$attributes = params.attributes,
      attributes = _params$attributes === void 0 ? {} : _params$attributes,
      _params$styles = params.styles,
      styles = _params$styles === void 0 ? {} : _params$styles;
    if (!iconDefinition) return;
    var prefix = iconDefinition.prefix,
      iconName = iconDefinition.iconName,
      icon = iconDefinition.icon;
    return apiObject(_objectSpread({
      type: 'icon'
    }, iconDefinition), function () {
      ensureCss();

      if (config.autoA11y) {
        if (title) {
          attributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
        } else {
          attributes['aria-hidden'] = 'true';
          attributes['focusable'] = 'false';
        }
      }

      return makeInlineSvgAbstract({
        icons: {
          main: asFoundIcon(icon),
          mask: mask ? asFoundIcon(mask.icon) : {
            found: false,
            width: null,
            height: null,
            icon: {}
          }
        },
        prefix: prefix,
        iconName: iconName,
        transform: _objectSpread({}, meaninglessTransform, transform),
        symbol: symbol,
        title: title,
        maskId: maskId,
        titleId: titleId,
        extra: {
          attributes: attributes,
          styles: styles,
          classes: classes
        }
      });
    });
  });
  var text = function text(content) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$transform2 = params.transform,
      transform = _params$transform2 === void 0 ? meaninglessTransform : _params$transform2,
      _params$title2 = params.title,
      title = _params$title2 === void 0 ? null : _params$title2,
      _params$classes2 = params.classes,
      classes = _params$classes2 === void 0 ? [] : _params$classes2,
      _params$attributes2 = params.attributes,
      attributes = _params$attributes2 === void 0 ? {} : _params$attributes2,
      _params$styles2 = params.styles,
      styles = _params$styles2 === void 0 ? {} : _params$styles2;
    return apiObject({
      type: 'text',
      content: content
    }, function () {
      ensureCss();
      return makeLayersTextAbstract({
        content: content,
        transform: _objectSpread({}, meaninglessTransform, transform),
        title: title,
        extra: {
          attributes: attributes,
          styles: styles,
          classes: ["".concat(config.familyPrefix, "-layers-text")].concat(_toConsumableArray(classes))
        }
      });
    });
  };
  var counter = function counter(content) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$title3 = params.title,
      title = _params$title3 === void 0 ? null : _params$title3,
      _params$classes3 = params.classes,
      classes = _params$classes3 === void 0 ? [] : _params$classes3,
      _params$attributes3 = params.attributes,
      attributes = _params$attributes3 === void 0 ? {} : _params$attributes3,
      _params$styles3 = params.styles,
      styles = _params$styles3 === void 0 ? {} : _params$styles3;
    return apiObject({
      type: 'counter',
      content: content
    }, function () {
      ensureCss();
      return makeLayersCounterAbstract({
        content: content.toString(),
        title: title,
        extra: {
          attributes: attributes,
          styles: styles,
          classes: ["".concat(config.familyPrefix, "-layers-counter")].concat(_toConsumableArray(classes))
        }
      });
    });
  };
  var layer = function layer(assembler) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$classes4 = params.classes,
      classes = _params$classes4 === void 0 ? [] : _params$classes4;
    return apiObject({
      type: 'layer'
    }, function () {
      ensureCss();
      var children = [];
      assembler(function (args) {
        Array.isArray(args) ? args.map(function (a) {
          children = children.concat(a.abstract);
        }) : children = children.concat(args.abstract);
      });
      return [{
        tag: 'span',
        attributes: {
          class: ["".concat(config.familyPrefix, "-layers")].concat(_toConsumableArray(classes)).join(' ')
        },
        children: children
      }];
    });
  };
  var api = {
    noAuto: noAuto,
    config: config,
    dom: dom,
    library: library,
    parse: parse,
    findIconDefinition: findIconDefinition,
    icon: icon,
    text: text,
    counter: counter,
    layer: layer,
    toHtml: toHtml
  };

  var autoReplace = function autoReplace() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _params$autoReplaceSv = params.autoReplaceSvgRoot,
      autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
    if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({
      node: autoReplaceSvgRoot
    });
  };

  function bootstrap() {
    if (IS_BROWSER) {
      if (!WINDOW.MhStyle) {
        WINDOW.MhStyle = api;
      }

      domready(function () {
        autoReplace();
        observe({
          treeCallback: onTree,
          nodeCallback: onNode,
          pseudoElementsCallback: searchPseudoElements
        });
      });
    }

    namespace.hooks = _objectSpread({}, namespace.hooks, {
      addPack: function addPack(prefix, icons) {
        namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, icons);
        build();
        autoReplace();
      },
      addShims: function addShims(shims) {
        var _namespace$shims;

        (_namespace$shims = namespace.shims).push.apply(_namespace$shims, _toConsumableArray(shims));

        build();
        autoReplace();
      }
    });
  }

  bunker(bootstrap);

}());